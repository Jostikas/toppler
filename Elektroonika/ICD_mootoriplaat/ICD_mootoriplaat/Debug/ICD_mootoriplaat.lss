
ICD_mootoriplaat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00001960  000019f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005f  0080015c  0080015c  00001a50  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d9  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000562  00000000  00000000  000030fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000960  00000000  00000000  0000365f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d4  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000746  00000000  00000000  00004494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000183f  00000000  00000000  00004bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
       4:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_1>
       8:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__vector_2>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      14:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      18:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      1c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      20:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      24:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_9>
      28:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      2c:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__vector_11>
      30:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_12>
      34:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      3c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      4c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_19>
      50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      54:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      58:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      5c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_23>
      60:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      68:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      6c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
      70:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>

00000074 <__trampolines_end>:
      74:	00 01       	movw	r0, r0
      76:	00 00       	nop
      78:	27 01       	movw	r4, r14
      7a:	12 00       	.word	0x0012	; ????
      7c:	02 00       	.word	0x0002	; ????
      7e:	00 e4       	ldi	r16, 0x40	; 64
      80:	00 43       	sbci	r16, 0x30	; 48
      82:	00 03       	mulsu	r16, r16
      84:	00 00       	nop
      86:	e0 00       	.word	0x00e0	; ????
      88:	04 01       	movw	r0, r8
      8a:	03 09       	sbc	r16, r3
      8c:	04 c2       	rjmp	.+1032   	; 0x496 <pid+0x24a>
      8e:	00 1c       	adc	r0, r0
      90:	02 03       	mulsu	r16, r18
      92:	09 04       	cpc	r0, r9
      94:	ac 00       	.word	0x00ac	; ????
      96:	14 03       	mulsu	r17, r20
      98:	03 09       	sbc	r16, r3
      9a:	04 9e       	mul	r0, r20
      9c:	00 0c       	add	r0, r0

0000009e <string3>:
      9e:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000000ac <string2>:
      ac:	14 03 54 00 65 00 73 00 74 00 42 00 65 00 6e 00     ..T.e.s.t.B.e.n.
      bc:	63 00 68 00 00 00                                   c.h...

000000c2 <string1>:
      c2:	1c 03 4c 00 61 00 75 00 72 00 69 00 20 00 4d 00     ..L.a.u.r.i. .M.
      d2:	69 00 68 00 6b 00 65 00 6c 00 73 00 00 00           i.h.k.e.l.s...

000000e0 <string0>:
      e0:	04 03 09 04                                         ....

000000e4 <config1_descriptor>:
      e4:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
      f4:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     104:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     114:	02 0a 00 00 00 07 05 03 02 20 00 00 07 05 84 02     ......... ......
     124:	20 00 00                                             ..

00000127 <device_descriptor>:
     127:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     137:	03 01                                               ..

00000139 <endpoint_config_table>:
     139:	00 01 c1 12 01 80 26 01 81 26 00                    ......&..&.

00000144 <__ctors_end>:
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d4 e0       	ldi	r29, 0x04	; 4
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	e0 e6       	ldi	r30, 0x60	; 96
     158:	f9 e1       	ldi	r31, 0x19	; 25
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x10>
     15c:	05 90       	lpm	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	ac 35       	cpi	r26, 0x5C	; 92
     162:	b1 07       	cpc	r27, r17
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0xc>

00000166 <__do_clear_bss>:
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	ac e5       	ldi	r26, 0x5C	; 92
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
     170:	ab 3b       	cpi	r26, 0xBB	; 187
     172:	b2 07       	cpc	r27, r18
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
     176:	0e 94 8a 05 	call	0xb14	; 0xb14 <main>
     17a:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_exit>

0000017e <__bad_interrupt>:
     17e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000182 <USART_send>:
int16_t currentPWM = 0;


char response[16];

void USART_send(unsigned char* data){
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
  PORTB |= 0b00001100;
     186:	25 b1       	in	r18, 0x05	; 5
     188:	2c 60       	ori	r18, 0x0C	; 12
     18a:	25 b9       	out	0x05, r18	; 5
  PORTD |= 0b00010000;
     18c:	5c 9a       	sbi	0x0b, 4	; 11
  //data = "derp\n\0";
  while(*data){
     18e:	fc 01       	movw	r30, r24
     190:	20 81       	ld	r18, Z
     192:	22 23       	and	r18, r18
     194:	69 f0       	breq	.+26     	; 0x1b0 <USART_send+0x2e>
     196:	dc 01       	movw	r26, r24
     198:	11 96       	adiw	r26, 0x01	; 1
    while(!( UCSR1A & (1<<UDRE1)));
     19a:	e8 ec       	ldi	r30, 0xC8	; 200
     19c:	f0 e0       	ldi	r31, 0x00	; 0
    UDR1 = *data;
     19e:	ce ec       	ldi	r28, 0xCE	; 206
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
void USART_send(unsigned char* data){
  PORTB |= 0b00001100;
  PORTD |= 0b00010000;
  //data = "derp\n\0";
  while(*data){
    while(!( UCSR1A & (1<<UDRE1)));
     1a2:	90 81       	ld	r25, Z
     1a4:	95 ff       	sbrs	r25, 5
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <USART_send+0x20>
    UDR1 = *data;
     1a8:	28 83       	st	Y, r18

void USART_send(unsigned char* data){
  PORTB |= 0b00001100;
  PORTD |= 0b00010000;
  //data = "derp\n\0";
  while(*data){
     1aa:	2d 91       	ld	r18, X+
     1ac:	21 11       	cpse	r18, r1
     1ae:	f9 cf       	rjmp	.-14     	; 0x1a2 <USART_send+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b0:	8f e1       	ldi	r24, 0x1F	; 31
     1b2:	9e e4       	ldi	r25, 0x4E	; 78
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <USART_send+0x32>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <USART_send+0x38>
     1ba:	00 00       	nop
    while(!( UCSR1A & (1<<UDRE1)));
    UDR1 = *data;
    data++;
  }
  _delay_ms(5);
  PORTB &= 0b11110011;
     1bc:	85 b1       	in	r24, 0x05	; 5
     1be:	83 7f       	andi	r24, 0xF3	; 243
     1c0:	85 b9       	out	0x05, r24	; 5
  PORTD &= 0b11101111;
     1c2:	5c 98       	cbi	0x0b, 4	; 11
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <forward>:

void forward(uint8_t pwm) {
	if (dir) {
     1ca:	90 91 a7 01 	lds	r25, 0x01A7
     1ce:	99 23       	and	r25, r25
     1d0:	19 f0       	breq	.+6      	; 0x1d8 <forward+0xe>
		bit_clear(PORTB, BIT(DIR1));
     1d2:	2e 98       	cbi	0x05, 6	; 5
		bit_set(PORTB, BIT(DIR2));
     1d4:	2f 9a       	sbi	0x05, 7	; 5
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <forward+0x12>
	} else {
		bit_set(PORTB, BIT(DIR1));
     1d8:	2e 9a       	sbi	0x05, 6	; 5
		bit_clear(PORTB, BIT(DIR2));
     1da:	2f 98       	cbi	0x05, 7	; 5
	}
	OCR1AL = pwm;
     1dc:	80 93 88 00 	sts	0x0088, r24
	currentPWM = pwm;
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	90 93 5f 01 	sts	0x015F, r25
     1e6:	80 93 5e 01 	sts	0x015E, r24
     1ea:	08 95       	ret

000001ec <backward>:
}

void backward(uint8_t pwm) {
	if (dir) {
     1ec:	90 91 a7 01 	lds	r25, 0x01A7
     1f0:	99 23       	and	r25, r25
     1f2:	19 f0       	breq	.+6      	; 0x1fa <backward+0xe>
		bit_set(PORTB, BIT(DIR1));
     1f4:	2e 9a       	sbi	0x05, 6	; 5
		bit_clear(PORTB, BIT(DIR2));
     1f6:	2f 98       	cbi	0x05, 7	; 5
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <backward+0x12>
	} else {
		bit_clear(PORTB, BIT(DIR1));
     1fa:	2e 98       	cbi	0x05, 6	; 5
		bit_set(PORTB, BIT(DIR2));
     1fc:	2f 9a       	sbi	0x05, 7	; 5
	}
	OCR1AL = pwm;
     1fe:	80 93 88 00 	sts	0x0088, r24
	currentPWM = -pwm;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	91 95       	neg	r25
     206:	81 95       	neg	r24
     208:	91 09       	sbc	r25, r1
     20a:	90 93 5f 01 	sts	0x015F, r25
     20e:	80 93 5e 01 	sts	0x015E, r24
     212:	08 95       	ret

00000214 <reset_pid>:
	} 	
	//OCR1AL = (pwm >= 0) ? pwm : -pwm;
}

void reset_pid() {
	err = 0;
     214:	10 92 a3 01 	sts	0x01A3, r1
     218:	10 92 a2 01 	sts	0x01A2, r1
	err_prev = 0;
     21c:	10 92 b6 01 	sts	0x01B6, r1
     220:	10 92 b5 01 	sts	0x01B5, r1
	intgrl = 0;
     224:	10 92 8c 01 	sts	0x018C, r1
     228:	10 92 8b 01 	sts	0x018B, r1
	der = 0;
     22c:	10 92 b4 01 	sts	0x01B4, r1
     230:	10 92 b3 01 	sts	0x01B3, r1
	sp = 0;
     234:	10 92 ac 01 	sts	0x01AC, r1
     238:	10 92 ab 01 	sts	0x01AB, r1
	sp_pid = 0;
     23c:	10 92 8f 01 	sts	0x018F, r1
     240:	10 92 8e 01 	sts	0x018E, r1
	forward(0);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>
     24a:	08 95       	ret

0000024c <pid>:
	}
	OCR1AL = pwm;
	currentPWM = -pwm;
}

void pid() {	
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
	err_prev = err;	
     250:	80 91 a2 01 	lds	r24, 0x01A2
     254:	90 91 a3 01 	lds	r25, 0x01A3
     258:	90 93 b6 01 	sts	0x01B6, r25
     25c:	80 93 b5 01 	sts	0x01B5, r24
	err = sp_pid - speed;
     260:	c0 91 af 01 	lds	r28, 0x01AF
     264:	d0 91 b0 01 	lds	r29, 0x01B0
     268:	20 91 8e 01 	lds	r18, 0x018E
     26c:	30 91 8f 01 	lds	r19, 0x018F
     270:	2c 1b       	sub	r18, r28
     272:	3d 0b       	sbc	r19, r29
     274:	30 93 a3 01 	sts	0x01A3, r19
     278:	20 93 a2 01 	sts	0x01A2, r18
	
	if (stallLevel != 2) {
     27c:	80 91 61 01 	lds	r24, 0x0161
     280:	82 30       	cpi	r24, 0x02	; 2
     282:	09 f4       	brne	.+2      	; 0x286 <pid+0x3a>
     284:	fd c0       	rjmp	.+506    	; 0x480 <pid+0x234>
	
		intgrl += (err * pid_multi) / igain;
     286:	e0 91 a6 01 	lds	r30, 0x01A6
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	c9 01       	movw	r24, r18
     28e:	bf 01       	movw	r22, r30
     290:	0e 94 4e 09 	call	0x129c	; 0x129c <__mulhi3>
     294:	60 91 ba 01 	lds	r22, 0x01BA
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	0e 94 5f 09 	call	0x12be	; 0x12be <__divmodhi4>
     29e:	80 91 8b 01 	lds	r24, 0x018B
     2a2:	90 91 8c 01 	lds	r25, 0x018C
     2a6:	68 0f       	add	r22, r24
     2a8:	79 1f       	adc	r23, r25
     2aa:	70 93 8c 01 	sts	0x018C, r23
     2ae:	60 93 8b 01 	sts	0x018B, r22
	
		//constrain integral
		if (intgrl < -imax) intgrl = -imax;
     2b2:	80 91 85 01 	lds	r24, 0x0185
     2b6:	90 91 86 01 	lds	r25, 0x0186
     2ba:	44 27       	eor	r20, r20
     2bc:	55 27       	eor	r21, r21
     2be:	48 1b       	sub	r20, r24
     2c0:	59 0b       	sbc	r21, r25
     2c2:	64 17       	cp	r22, r20
     2c4:	75 07       	cpc	r23, r21
     2c6:	24 f4       	brge	.+8      	; 0x2d0 <pid+0x84>
     2c8:	50 93 8c 01 	sts	0x018C, r21
     2cc:	40 93 8b 01 	sts	0x018B, r20
		if (intgrl > imax) intgrl = imax;
     2d0:	40 91 8b 01 	lds	r20, 0x018B
     2d4:	50 91 8c 01 	lds	r21, 0x018C
     2d8:	84 17       	cp	r24, r20
     2da:	95 07       	cpc	r25, r21
     2dc:	24 f4       	brge	.+8      	; 0x2e6 <pid+0x9a>
     2de:	90 93 8c 01 	sts	0x018C, r25
     2e2:	80 93 8b 01 	sts	0x018B, r24
	
		if (sp == 0) pwmmin = 0;
     2e6:	80 91 ab 01 	lds	r24, 0x01AB
     2ea:	90 91 ac 01 	lds	r25, 0x01AC
     2ee:	00 97       	sbiw	r24, 0x00	; 0
     2f0:	29 f4       	brne	.+10     	; 0x2fc <pid+0xb0>
     2f2:	10 92 a1 01 	sts	0x01A1, r1
     2f6:	10 92 a0 01 	sts	0x01A0, r1
     2fa:	16 c0       	rjmp	.+44     	; 0x328 <pid+0xdc>
		else if (sp < 0) pwmmin = -pwm_min;
     2fc:	99 23       	and	r25, r25
     2fe:	64 f4       	brge	.+24     	; 0x318 <pid+0xcc>
     300:	80 91 a4 01 	lds	r24, 0x01A4
     304:	90 91 a5 01 	lds	r25, 0x01A5
     308:	91 95       	neg	r25
     30a:	81 95       	neg	r24
     30c:	91 09       	sbc	r25, r1
     30e:	90 93 a1 01 	sts	0x01A1, r25
     312:	80 93 a0 01 	sts	0x01A0, r24
     316:	08 c0       	rjmp	.+16     	; 0x328 <pid+0xdc>
		else pwmmin = pwm_min;
     318:	80 91 a4 01 	lds	r24, 0x01A4
     31c:	90 91 a5 01 	lds	r25, 0x01A5
     320:	90 93 a1 01 	sts	0x01A1, r25
     324:	80 93 a0 01 	sts	0x01A0, r24
	
		pwm = pwmmin + err*pgain + intgrl/pid_multi;
     328:	60 91 aa 01 	lds	r22, 0x01AA
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	c9 01       	movw	r24, r18
     330:	0e 94 4e 09 	call	0x129c	; 0x129c <__mulhi3>
     334:	60 91 a0 01 	lds	r22, 0x01A0
     338:	70 91 a1 01 	lds	r23, 0x01A1
     33c:	9c 01       	movw	r18, r24
     33e:	26 0f       	add	r18, r22
     340:	37 1f       	adc	r19, r23
     342:	80 91 8b 01 	lds	r24, 0x018B
     346:	90 91 8c 01 	lds	r25, 0x018C
     34a:	bf 01       	movw	r22, r30
     34c:	0e 94 5f 09 	call	0x12be	; 0x12be <__divmodhi4>
     350:	62 0f       	add	r22, r18
     352:	73 1f       	adc	r23, r19
     354:	70 93 b2 01 	sts	0x01B2, r23
     358:	60 93 b1 01 	sts	0x01B1, r22
		//constrain pwm
		if (pwm < -255) pwm = -255;
     35c:	61 30       	cpi	r22, 0x01	; 1
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	72 07       	cpc	r23, r18
     362:	3c f4       	brge	.+14     	; 0x372 <pid+0x126>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	9f ef       	ldi	r25, 0xFF	; 255
     368:	90 93 b2 01 	sts	0x01B2, r25
     36c:	80 93 b1 01 	sts	0x01B1, r24
     370:	0a c0       	rjmp	.+20     	; 0x386 <pid+0x13a>
		if (pwm > 255) pwm = 255;
     372:	6f 3f       	cpi	r22, 0xFF	; 255
     374:	71 05       	cpc	r23, r1
     376:	39 f0       	breq	.+14     	; 0x386 <pid+0x13a>
     378:	34 f0       	brlt	.+12     	; 0x386 <pid+0x13a>
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 b2 01 	sts	0x01B2, r25
     382:	80 93 b1 01 	sts	0x01B1, r24
		
		prevStallCount = stallCount;
     386:	80 91 64 01 	lds	r24, 0x0164
     38a:	90 91 65 01 	lds	r25, 0x0165
     38e:	90 93 63 01 	sts	0x0163, r25
     392:	80 93 62 01 	sts	0x0162, r24
		if ((speed < 5 && currentPWM == 255 || speed > -5 && currentPWM == -255) && stallCount < stallErrorLimit) {
     396:	c5 30       	cpi	r28, 0x05	; 5
     398:	d1 05       	cpc	r29, r1
     39a:	3c f4       	brge	.+14     	; 0x3aa <pid+0x15e>
     39c:	20 91 5e 01 	lds	r18, 0x015E
     3a0:	30 91 5f 01 	lds	r19, 0x015F
     3a4:	2f 3f       	cpi	r18, 0xFF	; 255
     3a6:	31 05       	cpc	r19, r1
     3a8:	51 f0       	breq	.+20     	; 0x3be <pid+0x172>
     3aa:	cc 3f       	cpi	r28, 0xFC	; 252
     3ac:	df 4f       	sbci	r29, 0xFF	; 255
     3ae:	a4 f0       	brlt	.+40     	; 0x3d8 <pid+0x18c>
     3b0:	20 91 5e 01 	lds	r18, 0x015E
     3b4:	30 91 5f 01 	lds	r19, 0x015F
     3b8:	21 30       	cpi	r18, 0x01	; 1
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	69 f4       	brne	.+26     	; 0x3d8 <pid+0x18c>
     3be:	20 91 00 01 	lds	r18, 0x0100
     3c2:	30 91 01 01 	lds	r19, 0x0101
     3c6:	82 17       	cp	r24, r18
     3c8:	93 07       	cpc	r25, r19
     3ca:	30 f4       	brcc	.+12     	; 0x3d8 <pid+0x18c>
			stallCount++;
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	90 93 65 01 	sts	0x0165, r25
     3d2:	80 93 64 01 	sts	0x0164, r24
     3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <pid+0x19a>
		} else if (stallCount > 0) {
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	29 f0       	breq	.+10     	; 0x3e6 <pid+0x19a>
			stallCount--;
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	90 93 65 01 	sts	0x0165, r25
     3e2:	80 93 64 01 	sts	0x0164, r24
		}
	
		if (pwm < 0) {
     3e6:	80 91 b1 01 	lds	r24, 0x01B1
     3ea:	90 91 b2 01 	lds	r25, 0x01B2
     3ee:	99 23       	and	r25, r25
     3f0:	54 f4       	brge	.+20     	; 0x406 <pid+0x1ba>
			pwm *= -1;
     3f2:	91 95       	neg	r25
     3f4:	81 95       	neg	r24
     3f6:	91 09       	sbc	r25, r1
     3f8:	90 93 b2 01 	sts	0x01B2, r25
     3fc:	80 93 b1 01 	sts	0x01B1, r24
			backward(pwm);	
     400:	0e 94 f6 00 	call	0x1ec	; 0x1ec <backward>
     404:	02 c0       	rjmp	.+4      	; 0x40a <pid+0x1be>
		} else {
			forward(pwm);
     406:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>
		}
		
		if ((stallCount == stallWarningLimit - 1) && (prevStallCount == stallWarningLimit)) {
     40a:	20 91 02 01 	lds	r18, 0x0102
     40e:	30 91 03 01 	lds	r19, 0x0103
     412:	a9 01       	movw	r20, r18
     414:	41 50       	subi	r20, 0x01	; 1
     416:	51 09       	sbc	r21, r1
     418:	80 91 64 01 	lds	r24, 0x0164
     41c:	90 91 65 01 	lds	r25, 0x0165
     420:	48 17       	cp	r20, r24
     422:	59 07       	cpc	r21, r25
     424:	69 f4       	brne	.+26     	; 0x440 <pid+0x1f4>
     426:	60 91 62 01 	lds	r22, 0x0162
     42a:	70 91 63 01 	lds	r23, 0x0163
     42e:	26 17       	cp	r18, r22
     430:	37 07       	cpc	r19, r23
     432:	31 f4       	brne	.+12     	; 0x440 <pid+0x1f4>
			stallLevel = 0;
     434:	10 92 61 01 	sts	0x0161, r1
			stallChanged = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 60 01 	sts	0x0160, r24
     43e:	30 c0       	rjmp	.+96     	; 0x4a0 <pid+0x254>
		} else if ((stallCount == stallWarningLimit) && (prevStallCount == stallWarningLimit - 1)) {
     440:	28 17       	cp	r18, r24
     442:	39 07       	cpc	r19, r25
     444:	69 f4       	brne	.+26     	; 0x460 <pid+0x214>
     446:	20 91 62 01 	lds	r18, 0x0162
     44a:	30 91 63 01 	lds	r19, 0x0163
     44e:	42 17       	cp	r20, r18
     450:	53 07       	cpc	r21, r19
     452:	31 f4       	brne	.+12     	; 0x460 <pid+0x214>
			stallLevel = 1;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 61 01 	sts	0x0161, r24
			stallChanged = 1;
     45a:	80 93 60 01 	sts	0x0160, r24
     45e:	20 c0       	rjmp	.+64     	; 0x4a0 <pid+0x254>
		} else if (stallCount == stallErrorLimit) {
     460:	20 91 00 01 	lds	r18, 0x0100
     464:	30 91 01 01 	lds	r19, 0x0101
     468:	82 17       	cp	r24, r18
     46a:	93 07       	cpc	r25, r19
     46c:	c9 f4       	brne	.+50     	; 0x4a0 <pid+0x254>
			stallLevel = 2;
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	80 93 61 01 	sts	0x0161, r24
			stallChanged = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 60 01 	sts	0x0160, r24
			reset_pid();
     47a:	0e 94 0a 01 	call	0x214	; 0x214 <reset_pid>
     47e:	10 c0       	rjmp	.+32     	; 0x4a0 <pid+0x254>
		}
	} else {
		stallCount--;
     480:	80 91 64 01 	lds	r24, 0x0164
     484:	90 91 65 01 	lds	r25, 0x0165
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	90 93 65 01 	sts	0x0165, r25
     48e:	80 93 64 01 	sts	0x0164, r24
		if (stallCount == 0) {
     492:	89 2b       	or	r24, r25
     494:	29 f4       	brne	.+10     	; 0x4a0 <pid+0x254>
			stallLevel = 0;
     496:	10 92 61 01 	sts	0x0161, r1
			stallChanged = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 60 01 	sts	0x0160, r24
		}
	} 	
	//OCR1AL = (pwm >= 0) ? pwm : -pwm;
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <usb_write>:
	sp_pid = 0;
	forward(0);
}

//TODO implement UART
void usb_write(const char *str) {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	ec 01       	movw	r28, r24
    USART_send(str);
     4ac:	0e 94 c1 00 	call	0x182	; 0x182 <USART_send>
    while (*str) { 
     4b0:	88 81       	ld	r24, Y
     4b2:	88 23       	and	r24, r24
     4b4:	31 f0       	breq	.+12     	; 0x4c2 <usb_write+0x1c>
     4b6:	21 96       	adiw	r28, 0x01	; 1
        usb_serial_putchar(*str); 
     4b8:	0e 94 32 07 	call	0xe64	; 0xe64 <usb_serial_putchar>
}

//TODO implement UART
void usb_write(const char *str) {
    USART_send(str);
    while (*str) { 
     4bc:	89 91       	ld	r24, Y+
     4be:	81 11       	cpse	r24, r1
     4c0:	fb cf       	rjmp	.-10     	; 0x4b8 <usb_write+0x12>
        usb_serial_putchar(*str); 
        str++; 
	}
  
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <recv_str>:

uint8_t recv_str(char *buf, uint8_t size) {
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	c6 2f       	mov	r28, r22
     4d6:	8c 01       	movw	r16, r24
	char data;
	uint8_t count=0;
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (count < size) {
     4da:	12 c0       	rjmp	.+36     	; 0x500 <__stack+0x1>
		data = usb_serial_getchar();
     4dc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <usb_serial_getchar>
		//usb_serial_putchar(data);
		if (data == '\r' || data == '\n') {
     4e0:	8d 30       	cpi	r24, 0x0D	; 13
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <recv_str+0x20>
     4e4:	8a 30       	cpi	r24, 0x0A	; 10
     4e6:	19 f4       	brne	.+6      	; 0x4ee <recv_str+0x26>
			*buf = '\0';
     4e8:	f7 01       	movw	r30, r14
     4ea:	10 82       	st	Z, r1
			return size;
     4ec:	11 c0       	rjmp	.+34     	; 0x510 <__stack+0x11>
		}
		if (data >= ' ' && data <= '~') {
     4ee:	90 ee       	ldi	r25, 0xE0	; 224
     4f0:	98 0f       	add	r25, r24
     4f2:	9f 35       	cpi	r25, 0x5F	; 95
     4f4:	50 f4       	brcc	.+20     	; 0x50a <__stack+0xb>
			*buf++ = data;
     4f6:	f7 01       	movw	r30, r14
     4f8:	80 83       	st	Z, r24
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
			count++;
     4fe:	df 5f       	subi	r29, 0xFF	; 255
     500:	78 01       	movw	r14, r16

uint8_t recv_str(char *buf, uint8_t size) {
	char data;
	uint8_t count=0;
	
	while (count < size) {
     502:	dc 13       	cpse	r29, r28
     504:	eb cf       	rjmp	.-42     	; 0x4dc <recv_str+0x14>
     506:	dc 2f       	mov	r29, r28
     508:	02 c0       	rjmp	.+4      	; 0x50e <__stack+0xf>
     50a:	dc 17       	cp	r29, r28
     50c:	38 f3       	brcs	.-50     	; 0x4dc <recv_str+0x14>
		if (data >= ' ' && data <= '~') {
			*buf++ = data;
			count++;
		}		
	}
	return count;
     50e:	cd 2f       	mov	r28, r29
}
     510:	8c 2f       	mov	r24, r28
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <decode>:

void decode() {
	enc_now = bit_get(PIND, 3);
     520:	89 b1       	in	r24, 0x09	; 9
     522:	28 2f       	mov	r18, r24
     524:	23 70       	andi	r18, 0x03	; 3
     526:	20 93 88 01 	sts	0x0188, r18
	enc_dir = (enc_last & 1) ^ ((enc_now & 2) >> 1);
     52a:	81 fb       	bst	r24, 1
     52c:	99 27       	eor	r25, r25
     52e:	90 f9       	bld	r25, 0
     530:	80 91 6b 01 	lds	r24, 0x016B
     534:	81 70       	andi	r24, 0x01	; 1
     536:	89 27       	eor	r24, r25
     538:	80 93 8d 01 	sts	0x018D, r24
	enc_last = enc_now;
     53c:	20 93 6b 01 	sts	0x016B, r18
	if (enc_dir) {
     540:	88 23       	and	r24, r24
     542:	e9 f0       	breq	.+58     	; 0x57e <decode+0x5e>
		if (motor_polarity) wcount.value--;
     544:	80 91 06 01 	lds	r24, 0x0106
     548:	88 23       	and	r24, r24
     54a:	51 f0       	breq	.+20     	; 0x560 <decode+0x40>
     54c:	80 91 ad 01 	lds	r24, 0x01AD
     550:	90 91 ae 01 	lds	r25, 0x01AE
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	90 93 ae 01 	sts	0x01AE, r25
     55a:	80 93 ad 01 	sts	0x01AD, r24
     55e:	09 c0       	rjmp	.+18     	; 0x572 <decode+0x52>
		else wcount.value++;		
     560:	80 91 ad 01 	lds	r24, 0x01AD
     564:	90 91 ae 01 	lds	r25, 0x01AE
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	90 93 ae 01 	sts	0x01AE, r25
     56e:	80 93 ad 01 	sts	0x01AD, r24
		if (leds_on) bit_set(PORTC, BIT(LED2));
     572:	80 91 04 01 	lds	r24, 0x0104
     576:	88 23       	and	r24, r24
     578:	61 f1       	breq	.+88     	; 0x5d2 <decode+0xb2>
     57a:	45 9a       	sbi	0x08, 5	; 8
     57c:	1c c0       	rjmp	.+56     	; 0x5b6 <decode+0x96>
	}		
	else {
		if (motor_polarity) wcount.value++;
     57e:	80 91 06 01 	lds	r24, 0x0106
     582:	88 23       	and	r24, r24
     584:	51 f0       	breq	.+20     	; 0x59a <decode+0x7a>
     586:	80 91 ad 01 	lds	r24, 0x01AD
     58a:	90 91 ae 01 	lds	r25, 0x01AE
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	90 93 ae 01 	sts	0x01AE, r25
     594:	80 93 ad 01 	sts	0x01AD, r24
     598:	09 c0       	rjmp	.+18     	; 0x5ac <decode+0x8c>
		else wcount.value--;		
     59a:	80 91 ad 01 	lds	r24, 0x01AD
     59e:	90 91 ae 01 	lds	r25, 0x01AE
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	90 93 ae 01 	sts	0x01AE, r25
     5a8:	80 93 ad 01 	sts	0x01AD, r24
		if (leds_on) bit_clear(PORTC, BIT(LED2));
     5ac:	80 91 04 01 	lds	r24, 0x0104
     5b0:	88 23       	and	r24, r24
     5b2:	79 f0       	breq	.+30     	; 0x5d2 <decode+0xb2>
     5b4:	45 98       	cbi	0x08, 5	; 8
	}
	if ((wcount.value == 0) && leds_on) bit_flip(PORTC, BIT(LED1));
     5b6:	80 91 ad 01 	lds	r24, 0x01AD
     5ba:	90 91 ae 01 	lds	r25, 0x01AE
     5be:	89 2b       	or	r24, r25
     5c0:	41 f4       	brne	.+16     	; 0x5d2 <decode+0xb2>
     5c2:	80 91 04 01 	lds	r24, 0x0104
     5c6:	88 23       	and	r24, r24
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <decode+0xb2>
     5ca:	98 b1       	in	r25, 0x08	; 8
     5cc:	80 e1       	ldi	r24, 0x10	; 16
     5ce:	89 27       	eor	r24, r25
     5d0:	88 b9       	out	0x08, r24	; 8
     5d2:	08 95       	ret

000005d4 <setup>:
}

void setup() {
	//uint8_t pid_on_current = pid_on;
	pid_on = 0;
     5d4:	10 92 07 01 	sts	0x0107, r1
	forward(50);
     5d8:	82 e3       	ldi	r24, 0x32	; 50
     5da:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>
	wcount.value = 0;
     5de:	10 92 ae 01 	sts	0x01AE, r1
     5e2:	10 92 ad 01 	sts	0x01AD, r1
     5e6:	2f ef       	ldi	r18, 0xFF	; 255
     5e8:	89 e6       	ldi	r24, 0x69	; 105
     5ea:	98 e1       	ldi	r25, 0x18	; 24
     5ec:	21 50       	subi	r18, 0x01	; 1
     5ee:	80 40       	sbci	r24, 0x00	; 0
     5f0:	90 40       	sbci	r25, 0x00	; 0
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <setup+0x18>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <setup+0x22>
     5f6:	00 00       	nop
	_delay_ms(500);
	if (speed < 0) {
     5f8:	80 91 af 01 	lds	r24, 0x01AF
     5fc:	90 91 b0 01 	lds	r25, 0x01B0
     600:	99 23       	and	r25, r25
     602:	54 f4       	brge	.+20     	; 0x618 <setup+0x44>
		motor_polarity ^= 1;
     604:	60 91 06 01 	lds	r22, 0x0106
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	68 27       	eor	r22, r24
     60c:	60 93 06 01 	sts	0x0106, r22
		eeprom_update_byte((uint8_t*)1, motor_polarity);
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
	}		
	//else motor_polarity = dir;
	sp_pid = 0;
     618:	10 92 8f 01 	sts	0x018F, r1
     61c:	10 92 8e 01 	sts	0x018E, r1
	reset_pid();
     620:	0e 94 0a 01 	call	0x214	; 0x214 <reset_pid>
	forward(0);
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>
	pid_on = 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 07 01 	sts	0x0107, r24
     630:	08 95       	ret

00000632 <__vector_1>:
}

ISR(INT0_vect) {
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
	decode();
     654:	0e 94 90 02 	call	0x520	; 0x520 <decode>
}
     658:	ff 91       	pop	r31
     65a:	ef 91       	pop	r30
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_2>:

ISR(INT1_vect) {
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	2f 93       	push	r18
     686:	3f 93       	push	r19
     688:	4f 93       	push	r20
     68a:	5f 93       	push	r21
     68c:	6f 93       	push	r22
     68e:	7f 93       	push	r23
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
	decode();
     69c:	0e 94 90 02 	call	0x520	; 0x520 <decode>
}
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	7f 91       	pop	r23
     6ae:	6f 91       	pop	r22
     6b0:	5f 91       	pop	r21
     6b2:	4f 91       	pop	r20
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <__vector_19>:

ISR(TIMER0_COMPA_vect) {
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	8f 93       	push	r24
     6ce:	9f 93       	push	r25
	if (leds_on) bit_flip(PORTC, BIT(LED1));
     6d0:	80 91 04 01 	lds	r24, 0x0104
     6d4:	88 23       	and	r24, r24
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <__vector_19+0x1e>
     6d8:	98 b1       	in	r25, 0x08	; 8
     6da:	80 e1       	ldi	r24, 0x10	; 16
     6dc:	89 27       	eor	r24, r25
     6de:	88 b9       	out	0x08, r24	; 8
	decoder_count.value = wcount.value;
     6e0:	80 91 ad 01 	lds	r24, 0x01AD
     6e4:	90 91 ae 01 	lds	r25, 0x01AE
     6e8:	90 93 83 01 	sts	0x0183, r25
     6ec:	80 93 82 01 	sts	0x0182, r24
	speed = wcount.value;
     6f0:	90 93 b0 01 	sts	0x01B0, r25
     6f4:	80 93 af 01 	sts	0x01AF, r24
	wcount.value = 0;
     6f8:	10 92 ae 01 	sts	0x01AE, r1
     6fc:	10 92 ad 01 	sts	0x01AD, r1
	update_pid = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 84 01 	sts	0x0184, r24
}
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	0f 90       	pop	r0
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	0f 90       	pop	r0
     710:	1f 90       	pop	r1
     712:	18 95       	reti

00000714 <__vector_9>:

ISR(PCINT0_vect) {
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	8f 93       	push	r24
	//PB4 - IR LED
	ir_led = bit_get(PINB, BIT(0));
     720:	83 b1       	in	r24, 0x03	; 3
     722:	81 70       	andi	r24, 0x01	; 1
     724:	80 93 87 01 	sts	0x0187, r24
	if (ir_led & 0b00000001) {
     728:	88 23       	and	r24, r24
     72a:	49 f0       	breq	.+18     	; 0x73e <__vector_9+0x2a>
		ball = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 68 01 	sts	0x0168, r24
		if (leds_on) bit_set(PORTC, BIT(LED2));
     732:	80 91 04 01 	lds	r24, 0x0104
     736:	88 23       	and	r24, r24
     738:	41 f0       	breq	.+16     	; 0x74a <__vector_9+0x36>
     73a:	45 9a       	sbi	0x08, 5	; 8
     73c:	06 c0       	rjmp	.+12     	; 0x74a <__vector_9+0x36>
	}
	else {
		ball = 0;
     73e:	10 92 68 01 	sts	0x0168, r1
		if (leds_on) bit_clear(PORTC, BIT(LED2));
     742:	80 91 04 01 	lds	r24, 0x0104
     746:	81 11       	cpse	r24, r1
     748:	45 98       	cbi	0x08, 5	; 8
	}
}
     74a:	8f 91       	pop	r24
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_23>:

volatile unsigned char input_buf[16];
volatile uint8_t i = 0;
volatile uint8_t newData = 0;

ISR(USART1_RX_vect){
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
  unsigned char ch = UDR1;
     768:	80 91 ce 00 	lds	r24, 0x00CE
  
  if(ch >= ' ' && ch <= '~'){
     76c:	90 ee       	ldi	r25, 0xE0	; 224
     76e:	98 0f       	add	r25, r24
     770:	9f 35       	cpi	r25, 0x5F	; 95
     772:	58 f4       	brcc	.+22     	; 0x78a <__vector_23+0x34>
    input_buf[i] = ch;
     774:	e0 91 5d 01 	lds	r30, 0x015D
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	e0 57       	subi	r30, 0x70	; 112
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	80 83       	st	Z, r24
    i++;
     780:	90 91 5d 01 	lds	r25, 0x015D
     784:	9f 5f       	subi	r25, 0xFF	; 255
     786:	90 93 5d 01 	sts	0x015D, r25
  }
  
  if(ch == '\n' || ch == '\r'){
     78a:	8a 30       	cpi	r24, 0x0A	; 10
     78c:	11 f0       	breq	.+4      	; 0x792 <__vector_23+0x3c>
     78e:	8d 30       	cpi	r24, 0x0D	; 13
     790:	59 f4       	brne	.+22     	; 0x7a8 <__vector_23+0x52>
    input_buf[i] = '\0';
     792:	e0 91 5d 01 	lds	r30, 0x015D
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	e0 57       	subi	r30, 0x70	; 112
     79a:	fe 4f       	sbci	r31, 0xFE	; 254
     79c:	10 82       	st	Z, r1
    i = 0;
     79e:	10 92 5d 01 	sts	0x015D, r1
    newData = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 5c 01 	sts	0x015C, r24
    return;
  }
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <parse_and_execute_command>:

void parse_and_execute_command(char *buf) {
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
	uint8_t id = eeprom_read_byte((uint8_t*)2);
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     7ca:	18 2f       	mov	r17, r24
  char *command;
	int16_t par1;
	command = buf;
  par1 = atoi(command);
     7cc:	ce 01       	movw	r24, r28
     7ce:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
  if(par1 != id){
     7d2:	21 2f       	mov	r18, r17
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	28 17       	cp	r18, r24
     7d8:	39 07       	cpc	r19, r25
     7da:	09 f0       	breq	.+2      	; 0x7de <parse_and_execute_command+0x24>
     7dc:	97 c1       	rjmp	.+814    	; 0xb0c <parse_and_execute_command+0x352>
    return;
  }
  else{
    while (*command != ':'){
     7de:	88 81       	ld	r24, Y
     7e0:	8a 33       	cpi	r24, 0x3A	; 58
     7e2:	49 f0       	breq	.+18     	; 0x7f6 <parse_and_execute_command+0x3c>
     7e4:	9e 01       	movw	r18, r28
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
      command++;
     7ea:	e9 01       	movw	r28, r18
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
  par1 = atoi(command);
  if(par1 != id){
    return;
  }
  else{
    while (*command != ':'){
     7f0:	98 81       	ld	r25, Y
     7f2:	9a 33       	cpi	r25, 0x3A	; 58
     7f4:	d1 f7       	brne	.-12     	; 0x7ea <parse_and_execute_command+0x30>
      command++;
    }
    command++;
  }        
	if ((command[0] == 's') && (command[1] == 'd')) {
     7f6:	99 81       	ldd	r25, Y+1	; 0x01
     7f8:	93 37       	cpi	r25, 0x73	; 115
     7fa:	b1 f4       	brne	.+44     	; 0x828 <parse_and_execute_command+0x6e>
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	84 36       	cpi	r24, 0x64	; 100
     800:	09 f0       	breq	.+2      	; 0x804 <parse_and_execute_command+0x4a>
     802:	70 c0       	rjmp	.+224    	; 0x8e4 <parse_and_execute_command+0x12a>
		//set motor speed with pid setpoint
		pid_on = 1;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 07 01 	sts	0x0107, r24
		par1 = atoi(command+2);
     80a:	ce 01       	movw	r24, r28
     80c:	03 96       	adiw	r24, 0x03	; 3
     80e:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		sp_pid = par1;
     812:	90 93 8f 01 	sts	0x018F, r25
     816:	80 93 8e 01 	sts	0x018E, r24
		if (sp_pid == 0) reset_pid();
     81a:	89 2b       	or	r24, r25
     81c:	11 f4       	brne	.+4      	; 0x822 <parse_and_execute_command+0x68>
     81e:	0e 94 0a 01 	call	0x214	; 0x214 <reset_pid>
		fail_counter = 0;
     822:	10 92 6a 01 	sts	0x016A, r1
     826:	72 c1       	rjmp	.+740    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'w') && (command[1] == 'l')) {
     828:	97 37       	cpi	r25, 0x77	; 119
     82a:	a9 f4       	brne	.+42     	; 0x856 <parse_and_execute_command+0x9c>
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	8c 36       	cpi	r24, 0x6C	; 108
     830:	09 f0       	breq	.+2      	; 0x834 <parse_and_execute_command+0x7a>
     832:	51 c1       	rjmp	.+674    	; 0xad6 <parse_and_execute_command+0x31c>
		//set motor speed with pwm
		pid_on = 0;
     834:	10 92 07 01 	sts	0x0107, r1
		par1 = atoi(command+2);
     838:	ce 01       	movw	r24, r28
     83a:	03 96       	adiw	r24, 0x03	; 3
     83c:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		if (par1 < 0) {
     840:	99 23       	and	r25, r25
     842:	24 f4       	brge	.+8      	; 0x84c <parse_and_execute_command+0x92>
			par1 *= -1;
			backward(par1);
     844:	81 95       	neg	r24
     846:	0e 94 f6 00 	call	0x1ec	; 0x1ec <backward>
     84a:	02 c0       	rjmp	.+4      	; 0x850 <parse_and_execute_command+0x96>
		} else {
			forward(par1);
     84c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>

		}
		fail_counter = 0;
     850:	10 92 6a 01 	sts	0x016A, r1
     854:	5b c1       	rjmp	.+694    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'g') && (command[1] == 'b')) {
     856:	97 36       	cpi	r25, 0x67	; 103
     858:	09 f5       	brne	.+66     	; 0x89c <parse_and_execute_command+0xe2>
     85a:	8a 81       	ldd	r24, Y+2	; 0x02
     85c:	82 36       	cpi	r24, 0x62	; 98
     85e:	09 f0       	breq	.+2      	; 0x862 <parse_and_execute_command+0xa8>
     860:	6b c0       	rjmp	.+214    	; 0x938 <parse_and_execute_command+0x17e>
		//get ball
    sprintf(response, "<%d:b:%d>\n", id, ball);
     862:	80 91 68 01 	lds	r24, 0x0168
     866:	1f 92       	push	r1
     868:	8f 93       	push	r24
     86a:	1f 92       	push	r1
     86c:	1f 93       	push	r17
     86e:	8f e0       	ldi	r24, 0x0F	; 15
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	80 e7       	ldi	r24, 0x70	; 112
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
		usb_write(response);
     882:	80 e7       	ldi	r24, 0x70	; 112
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
		} else {
			forward(par1);

		}
		fail_counter = 0;
	} else if ((command[0] == 'g') && (command[1] == 'b')) {
     88a:	8d b7       	in	r24, 0x3d	; 61
     88c:	9e b7       	in	r25, 0x3e	; 62
     88e:	08 96       	adiw	r24, 0x08	; 8
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	9e bf       	out	0x3e, r25	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	8d bf       	out	0x3d, r24	; 61
     89a:	38 c1       	rjmp	.+624    	; 0xb0c <parse_and_execute_command+0x352>
		//get ball
    sprintf(response, "<%d:b:%d>\n", id, ball);
		usb_write(response);
	} else if ((command[0] == 'd') && (command[1] == 'r')) {
     89c:	94 36       	cpi	r25, 0x64	; 100
     89e:	49 f5       	brne	.+82     	; 0x8f2 <parse_and_execute_command+0x138>
     8a0:	8a 81       	ldd	r24, Y+2	; 0x02
     8a2:	82 37       	cpi	r24, 0x72	; 114
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <parse_and_execute_command+0xee>
     8a6:	d2 c0       	rjmp	.+420    	; 0xa4c <parse_and_execute_command+0x292>
		//toggle motor direction
		par1 = atoi(command+2);
     8a8:	ce 01       	movw	r24, r28
     8aa:	03 96       	adiw	r24, 0x03	; 3
     8ac:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		if (dir ^ par1) motor_polarity ^= 1;
     8b0:	20 91 a7 01 	lds	r18, 0x01A7
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	28 17       	cp	r18, r24
     8b8:	39 07       	cpc	r19, r25
     8ba:	31 f0       	breq	.+12     	; 0x8c8 <parse_and_execute_command+0x10e>
     8bc:	30 91 06 01 	lds	r19, 0x0106
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	23 27       	eor	r18, r19
     8c4:	20 93 06 01 	sts	0x0106, r18
		dir = par1;
     8c8:	80 93 a7 01 	sts	0x01A7, r24
		eeprom_update_byte((uint8_t*)0, dir);
     8cc:	68 2f       	mov	r22, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)1, motor_polarity);
     8d6:	60 91 06 01 	lds	r22, 0x0106
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
     8e2:	14 c1       	rjmp	.+552    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 's') && (command[1] == 't')) {
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	84 37       	cpi	r24, 0x74	; 116
     8e8:	09 f0       	breq	.+2      	; 0x8ec <parse_and_execute_command+0x132>
     8ea:	3e c0       	rjmp	.+124    	; 0x968 <parse_and_execute_command+0x1ae>
		//perform setup
		setup();
     8ec:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <setup>
     8f0:	0d c1       	rjmp	.+538    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'm') && (command[1] == 'p')) {
     8f2:	9d 36       	cpi	r25, 0x6D	; 109
     8f4:	81 f4       	brne	.+32     	; 0x916 <parse_and_execute_command+0x15c>
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	80 37       	cpi	r24, 0x70	; 112
     8fa:	09 f0       	breq	.+2      	; 0x8fe <parse_and_execute_command+0x144>
     8fc:	ec c0       	rjmp	.+472    	; 0xad6 <parse_and_execute_command+0x31c>
		//toggle motor polarity
		par1 = atoi(command+2);
     8fe:	ce 01       	movw	r24, r28
     900:	03 96       	adiw	r24, 0x03	; 3
     902:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		motor_polarity = par1;
     906:	80 93 06 01 	sts	0x0106, r24
		eeprom_update_byte((uint8_t*)1, motor_polarity);
     90a:	68 2f       	mov	r22, r24
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
     914:	fb c0       	rjmp	.+502    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'p') && (command[1] == 'd')) {
     916:	90 37       	cpi	r25, 0x70	; 112
     918:	d1 f4       	brne	.+52     	; 0x94e <parse_and_execute_command+0x194>
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	84 36       	cpi	r24, 0x64	; 100
     91e:	09 f0       	breq	.+2      	; 0x922 <parse_and_execute_command+0x168>
     920:	73 c0       	rjmp	.+230    	; 0xa08 <parse_and_execute_command+0x24e>
		//toggle pid
		par1 = atoi(command+2);
     922:	ce 01       	movw	r24, r28
     924:	03 96       	adiw	r24, 0x03	; 3
     926:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		pid_on = par1;
     92a:	80 93 07 01 	sts	0x0107, r24
		if (!pid_on) reset_pid();
     92e:	81 11       	cpse	r24, r1
     930:	ed c0       	rjmp	.+474    	; 0xb0c <parse_and_execute_command+0x352>
     932:	0e 94 0a 01 	call	0x214	; 0x214 <reset_pid>
     936:	ea c0       	rjmp	.+468    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'g') && (command[1] == 's')) {
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	83 37       	cpi	r24, 0x73	; 115
     93c:	09 f0       	breq	.+2      	; 0x940 <parse_and_execute_command+0x186>
     93e:	97 c0       	rjmp	.+302    	; 0xa6e <parse_and_execute_command+0x2b4>
		//toggle get speed on every pid cycle
		par1 = atoi(command+2);
     940:	ce 01       	movw	r24, r28
     942:	03 96       	adiw	r24, 0x03	; 3
     944:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		send_speed = par1;
     948:	80 93 69 01 	sts	0x0169, r24
     94c:	df c0       	rjmp	.+446    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'f') && (command[1] == 's')) {
     94e:	96 36       	cpi	r25, 0x66	; 102
     950:	51 f5       	brne	.+84     	; 0x9a6 <parse_and_execute_command+0x1ec>
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	83 37       	cpi	r24, 0x73	; 115
     956:	09 f0       	breq	.+2      	; 0x95a <parse_and_execute_command+0x1a0>
     958:	be c0       	rjmp	.+380    	; 0xad6 <parse_and_execute_command+0x31c>
		//toggle failsafe
		par1 = atoi(command+2);
     95a:	ce 01       	movw	r24, r28
     95c:	03 96       	adiw	r24, 0x03	; 3
     95e:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		failsafe = par1;
     962:	80 93 05 01 	sts	0x0105, r24
     966:	d2 c0       	rjmp	.+420    	; 0xb0c <parse_and_execute_command+0x352>
	} else if (command[0] == 's') {
		//get speed
		sprintf(response, "<%d:s:%d>\n", id, speed);
     968:	80 91 b0 01 	lds	r24, 0x01B0
     96c:	8f 93       	push	r24
     96e:	80 91 af 01 	lds	r24, 0x01AF
     972:	8f 93       	push	r24
     974:	1f 92       	push	r1
     976:	1f 93       	push	r17
     978:	8a e1       	ldi	r24, 0x1A	; 26
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	80 e7       	ldi	r24, 0x70	; 112
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
		usb_write(response);
     98c:	80 e7       	ldi	r24, 0x70	; 112
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
     994:	8d b7       	in	r24, 0x3d	; 61
     996:	9e b7       	in	r25, 0x3e	; 62
     998:	08 96       	adiw	r24, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	9e bf       	out	0x3e, r25	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	8d bf       	out	0x3d, r24	; 61
     9a4:	b3 c0       	rjmp	.+358    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'i') && (command[1] == 'd')) {
     9a6:	99 36       	cpi	r25, 0x69	; 105
     9a8:	69 f4       	brne	.+26     	; 0x9c4 <parse_and_execute_command+0x20a>
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	84 36       	cpi	r24, 0x64	; 100
     9ae:	e9 f5       	brne	.+122    	; 0xa2a <parse_and_execute_command+0x270>
		//set id
		par1 = atoi(command+2);
     9b0:	ce 01       	movw	r24, r28
     9b2:	03 96       	adiw	r24, 0x03	; 3
     9b4:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		eeprom_update_byte((uint8_t*)2, par1);
     9b8:	68 2f       	mov	r22, r24
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
     9c2:	a4 c0       	rjmp	.+328    	; 0xb0c <parse_and_execute_command+0x352>
	} else if (command[0] == '?') {
     9c4:	9f 33       	cpi	r25, 0x3F	; 63
     9c6:	09 f0       	breq	.+2      	; 0x9ca <parse_and_execute_command+0x210>
     9c8:	76 c0       	rjmp	.+236    	; 0xab6 <parse_and_execute_command+0x2fc>
		//get info: id
		par1 = eeprom_read_byte((uint8_t*)2);
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
		sprintf(response, "<%d:id:%d>\n", id, par1);
     9d2:	1f 92       	push	r1
     9d4:	8f 93       	push	r24
     9d6:	1f 92       	push	r1
     9d8:	1f 93       	push	r17
     9da:	85 e2       	ldi	r24, 0x25	; 37
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	80 e7       	ldi	r24, 0x70	; 112
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	9f 93       	push	r25
     9e8:	8f 93       	push	r24
     9ea:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
		usb_write(response);
     9ee:	80 e7       	ldi	r24, 0x70	; 112
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
     9f6:	8d b7       	in	r24, 0x3d	; 61
     9f8:	9e b7       	in	r25, 0x3e	; 62
     9fa:	08 96       	adiw	r24, 0x08	; 8
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	9e bf       	out	0x3e, r25	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	8d bf       	out	0x3d, r24	; 61
     a06:	82 c0       	rjmp	.+260    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'p') && (command[1] == 'g')) {
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	87 36       	cpi	r24, 0x67	; 103
     a0c:	09 f0       	breq	.+2      	; 0xa10 <parse_and_execute_command+0x256>
     a0e:	63 c0       	rjmp	.+198    	; 0xad6 <parse_and_execute_command+0x31c>
		//set pgain
		par1 = atoi(command+2);
     a10:	ce 01       	movw	r24, r28
     a12:	03 96       	adiw	r24, 0x03	; 3
     a14:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
     a18:	c8 2f       	mov	r28, r24
		eeprom_update_byte((uint8_t*)3, par1);
     a1a:	68 2f       	mov	r22, r24
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
		pgain = par1;
     a24:	c0 93 aa 01 	sts	0x01AA, r28
     a28:	71 c0       	rjmp	.+226    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'i') && (command[1] == 'g')) {
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	87 36       	cpi	r24, 0x67	; 103
     a2e:	09 f0       	breq	.+2      	; 0xa32 <parse_and_execute_command+0x278>
     a30:	52 c0       	rjmp	.+164    	; 0xad6 <parse_and_execute_command+0x31c>
		//set igain
		par1 = atoi(command+2);
     a32:	ce 01       	movw	r24, r28
     a34:	03 96       	adiw	r24, 0x03	; 3
     a36:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
     a3a:	c8 2f       	mov	r28, r24
		eeprom_update_byte((uint8_t*)4, par1);
     a3c:	68 2f       	mov	r22, r24
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
		igain = par1;
     a46:	c0 93 ba 01 	sts	0x01BA, r28
     a4a:	60 c0       	rjmp	.+192    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'd') && (command[1] == 'g')) {
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	87 36       	cpi	r24, 0x67	; 103
     a50:	09 f0       	breq	.+2      	; 0xa54 <parse_and_execute_command+0x29a>
     a52:	41 c0       	rjmp	.+130    	; 0xad6 <parse_and_execute_command+0x31c>
		//set dgain
		par1 = atoi(command+2);
     a54:	ce 01       	movw	r24, r28
     a56:	03 96       	adiw	r24, 0x03	; 3
     a58:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
     a5c:	c8 2f       	mov	r28, r24
		eeprom_update_byte((uint8_t*)5, par1);
     a5e:	68 2f       	mov	r22, r24
     a60:	85 e0       	ldi	r24, 0x05	; 5
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
		dgain = par1;
     a68:	c0 93 b9 01 	sts	0x01B9, r28
     a6c:	4f c0       	rjmp	.+158    	; 0xb0c <parse_and_execute_command+0x352>
	} else if ((command[0] == 'g') && (command[1] == 'g')) {
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	87 36       	cpi	r24, 0x67	; 103
     a72:	89 f5       	brne	.+98     	; 0xad6 <parse_and_execute_command+0x31c>
		//get pid gains
		sprintf(response, "<%d:pid:%d,%d>\n", id, pgain, igain);
     a74:	80 91 ba 01 	lds	r24, 0x01BA
     a78:	1f 92       	push	r1
     a7a:	8f 93       	push	r24
     a7c:	80 91 aa 01 	lds	r24, 0x01AA
     a80:	1f 92       	push	r1
     a82:	8f 93       	push	r24
     a84:	1f 92       	push	r1
     a86:	1f 93       	push	r17
     a88:	81 e3       	ldi	r24, 0x31	; 49
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	80 e7       	ldi	r24, 0x70	; 112
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
		usb_write(response);
     a9c:	80 e7       	ldi	r24, 0x70	; 112
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
	} else if ((command[0] == 'd') && (command[1] == 'g')) {
		//set dgain
		par1 = atoi(command+2);
		eeprom_update_byte((uint8_t*)5, par1);
		dgain = par1;
	} else if ((command[0] == 'g') && (command[1] == 'g')) {
     aa4:	8d b7       	in	r24, 0x3d	; 61
     aa6:	9e b7       	in	r25, 0x3e	; 62
     aa8:	0a 96       	adiw	r24, 0x0a	; 10
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	9e bf       	out	0x3e, r25	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	8d bf       	out	0x3d, r24	; 61
     ab4:	2b c0       	rjmp	.+86     	; 0xb0c <parse_and_execute_command+0x352>
		//get pid gains
		sprintf(response, "<%d:pid:%d,%d>\n", id, pgain, igain);
		usb_write(response);
	} else if ((command[0] == 't') && (command[1] == 'l')) {
     ab6:	94 37       	cpi	r25, 0x74	; 116
     ab8:	71 f4       	brne	.+28     	; 0xad6 <parse_and_execute_command+0x31c>
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	8c 36       	cpi	r24, 0x6C	; 108
     abe:	59 f4       	brne	.+22     	; 0xad6 <parse_and_execute_command+0x31c>
		//toggle leds
		par1 = atoi(command+2);
     ac0:	ce 01       	movw	r24, r28
     ac2:	03 96       	adiw	r24, 0x03	; 3
     ac4:	0e 94 87 09 	call	0x130e	; 0x130e <atoi>
		leds_on = par1;
     ac8:	80 93 04 01 	sts	0x0104, r24
		if (leds_on == 0) {
     acc:	81 11       	cpse	r24, r1
     ace:	1e c0       	rjmp	.+60     	; 0xb0c <parse_and_execute_command+0x352>
			bit_clear(PORTC, BIT(LED1));
     ad0:	44 98       	cbi	0x08, 4	; 8
			bit_clear(PORTC, BIT(LED2));
     ad2:	45 98       	cbi	0x08, 5	; 8
     ad4:	1b c0       	rjmp	.+54     	; 0xb0c <parse_and_execute_command+0x352>
  }
  else{
    while (*command != ':'){
      command++;
    }
    command++;
     ad6:	21 96       	adiw	r28, 0x01	; 1
			bit_clear(PORTC, BIT(LED1));
			bit_clear(PORTC, BIT(LED2));
		}			
	} else {
		//bit_flip(PORTC, BIT(LED1));
		sprintf(response, "%d:%s\n", id, command);
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	1f 92       	push	r1
     ade:	1f 93       	push	r17
     ae0:	81 e4       	ldi	r24, 0x41	; 65
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	80 e7       	ldi	r24, 0x70	; 112
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	9f 93       	push	r25
     aee:	8f 93       	push	r24
     af0:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
		usb_write(response);
     af4:	80 e7       	ldi	r24, 0x70	; 112
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
     afc:	8d b7       	in	r24, 0x3d	; 61
     afe:	9e b7       	in	r25, 0x3e	; 62
     b00:	08 96       	adiw	r24, 0x08	; 8
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	9e bf       	out	0x3e, r25	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	8d bf       	out	0x3d, r24	; 61
	}
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	08 95       	ret

00000b14 <main>:

int main(void) {	
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	60 97       	sbiw	r28, 0x10	; 16
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 0x80;
     b28:	e1 e6       	ldi	r30, 0x61	; 97
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	80 83       	st	Z, r24
	CLKPR = 0x00;
     b30:	10 82       	st	Z, r1
	usb_init();
     b32:	0e 94 d3 06 	call	0xda6	; 0xda6 <usb_init>
  
  //TODO Implement and test UART init 
  //UART init
  DDRB &= 0b11110010;
     b36:	84 b1       	in	r24, 0x04	; 4
     b38:	82 7f       	andi	r24, 0xF2	; 242
     b3a:	84 b9       	out	0x04, r24	; 4
  DDRB |= 0b00001100;
     b3c:	84 b1       	in	r24, 0x04	; 4
     b3e:	8c 60       	ori	r24, 0x0C	; 12
     b40:	84 b9       	out	0x04, r24	; 4
  DDRD &= ~(0b00000010);
     b42:	51 98       	cbi	0x0a, 1	; 10
  DDRD |= 0b00010100;
     b44:	8a b1       	in	r24, 0x0a	; 10
     b46:	84 61       	ori	r24, 0x14	; 20
     b48:	8a b9       	out	0x0a, r24	; 10
  //DDRD |= 0b00000010;   
  //19200
  //8
  UBRR1 = 51;
     b4a:	83 e3       	ldi	r24, 0x33	; 51
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	90 93 cd 00 	sts	0x00CD, r25
     b52:	80 93 cc 00 	sts	0x00CC, r24
  //enable Tx and Rx
  UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
     b56:	88 e9       	ldi	r24, 0x98	; 152
     b58:	80 93 c9 00 	sts	0x00C9, r24
  UCSR1C = (1<<USBS1)|(3<<UCSZ10);  
     b5c:	8e e0       	ldi	r24, 0x0E	; 14
     b5e:	80 93 ca 00 	sts	0x00CA, r24
	
	dir = eeprom_read_byte((uint8_t*)0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     b6a:	80 93 a7 01 	sts	0x01A7, r24
	motor_polarity = eeprom_read_byte((uint8_t*)1);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     b76:	80 93 06 01 	sts	0x0106, r24
	pgain = eeprom_read_byte((uint8_t*)3);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     b82:	18 2f       	mov	r17, r24
     b84:	80 93 aa 01 	sts	0x01AA, r24
	igain = eeprom_read_byte((uint8_t*)4);
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     b90:	80 93 ba 01 	sts	0x01BA, r24
	dgain = eeprom_read_byte((uint8_t*)5);
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <eeprom_read_byte>
     b9c:	80 93 b9 01 	sts	0x01B9, r24
	
	if (pgain == 255) {
     ba0:	1f 3f       	cpi	r17, 0xFF	; 255
     ba2:	41 f4       	brne	.+16     	; 0xbb4 <main+0xa0>
		pgain = 6;
     ba4:	86 e0       	ldi	r24, 0x06	; 6
     ba6:	80 93 aa 01 	sts	0x01AA, r24
		eeprom_update_byte((uint8_t*)3, pgain);
     baa:	66 e0       	ldi	r22, 0x06	; 6
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
	}
	if (igain == 255) {
     bb4:	80 91 ba 01 	lds	r24, 0x01BA
     bb8:	8f 3f       	cpi	r24, 0xFF	; 255
     bba:	41 f4       	brne	.+16     	; 0xbcc <main+0xb8>
		igain = 8;
     bbc:	88 e0       	ldi	r24, 0x08	; 8
     bbe:	80 93 ba 01 	sts	0x01BA, r24
		eeprom_update_byte((uint8_t*)4, igain);
     bc2:	68 e0       	ldi	r22, 0x08	; 8
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <eeprom_update_byte>
	}
	
	bit_set(DDRC, BIT(LED1));	
     bcc:	3c 9a       	sbi	0x07, 4	; 7
	bit_set(DDRC, BIT(LED2));
     bce:	3d 9a       	sbi	0x07, 5	; 7
	bit_set(PORTC, BIT(LED1));
     bd0:	44 9a       	sbi	0x08, 4	; 8
	bit_set(PORTC, BIT(LED2));
     bd2:	45 9a       	sbi	0x08, 5	; 8
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	83 ed       	ldi	r24, 0xD3	; 211
     bd8:	90 e3       	ldi	r25, 0x30	; 48
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0xc6>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0xd0>
     be4:	00 00       	nop
	//Wait for USB to be configured
	//while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);
	
	//PID
	pid_multi = 32;
     be6:	80 e2       	ldi	r24, 0x20	; 32
     be8:	80 93 a6 01 	sts	0x01A6, r24
	imax = 255 * pid_multi;
     bec:	80 ee       	ldi	r24, 0xE0	; 224
     bee:	9f e1       	ldi	r25, 0x1F	; 31
     bf0:	90 93 86 01 	sts	0x0186, r25
     bf4:	80 93 85 01 	sts	0x0185, r24
	err_max = 4000;
     bf8:	80 ea       	ldi	r24, 0xA0	; 160
     bfa:	9f e0       	ldi	r25, 0x0F	; 15
     bfc:	90 93 81 01 	sts	0x0181, r25
     c00:	80 93 80 01 	sts	0x0180, r24
	pwm_min = 25;
     c04:	89 e1       	ldi	r24, 0x19	; 25
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	90 93 a5 01 	sts	0x01A5, r25
     c0c:	80 93 a4 01 	sts	0x01A4, r24
	//igain = 8;	//divider
	//pgain = 2;
	//dgain = 0;
	intgrl = 0;
     c10:	10 92 8c 01 	sts	0x018C, r1
     c14:	10 92 8b 01 	sts	0x018B, r1
	count = 0;
     c18:	10 92 a9 01 	sts	0x01A9, r1
     c1c:	10 92 a8 01 	sts	0x01A8, r1
	speed = 0;
     c20:	10 92 b0 01 	sts	0x01B0, r1
     c24:	10 92 af 01 	sts	0x01AF, r1
	err = 0;
     c28:	10 92 a3 01 	sts	0x01A3, r1
     c2c:	10 92 a2 01 	sts	0x01A2, r1
	
	//timer0
	TCCR0A = 0b00000010;
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000101; //prescale 1024
     c34:	85 e0       	ldi	r24, 0x05	; 5
     c36:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;
     c38:	2a ef       	ldi	r18, 0xFA	; 250
     c3a:	27 bd       	out	0x27, r18	; 39
	TIMSK0 = 0b00000010;
     c3c:	90 93 6e 00 	sts	0x006E, r25
	TCNT0 = 0;
     c40:	16 bc       	out	0x26, r1	; 38
	//DDRB &= 0b11110010;
  
  //UART
  //DDRB |= 0b00001100;
   
	PCICR = 1; //enable pin change interrupt
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	90 93 68 00 	sts	0x0068, r25
	PCMSK0 = 0b00000001;	
     c48:	90 93 6b 00 	sts	0x006B, r25
	
	//quadrature decoder, INT0, INT1 interrupt
	bit_clear(DDRD, BIT(0));
     c4c:	50 98       	cbi	0x0a, 0	; 10
	bit_clear(DDRD, BIT(1));
     c4e:	51 98       	cbi	0x0a, 1	; 10
	EICRA = 0b00000101; //both edges
     c50:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0b00000011; //enable mask
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	8d bb       	out	0x1d, r24	; 29
	
	//Mootorite PWM
	bit_set(DDRC, BIT(PWM));	
     c58:	3e 9a       	sbi	0x07, 6	; 7
	
	//TCCR1A = 0b10000001; //phase correct
	//TCCR1B = 0b00000011; //prescale 64, freq 490
	TCCR1A = 0b10000001; //fast pwm
     c5a:	81 e8       	ldi	r24, 0x81	; 129
     c5c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00001100; //prescale 64, freq 980		
     c60:	8c e0       	ldi	r24, 0x0C	; 12
     c62:	80 93 81 00 	sts	0x0081, r24
	
	OCR1AL = 0;
     c66:	10 92 88 00 	sts	0x0088, r1
	//OCR1BL = 0;
	
	bit_set(DDRB, BIT(DIR1));
     c6a:	26 9a       	sbi	0x04, 6	; 4
	bit_set(DDRB, BIT(DIR2));
     c6c:	27 9a       	sbi	0x04, 7	; 4
	
	sei();
     c6e:	78 94       	sei
			if (pid_on) {
				pid();
				update_pid = 0;
			}
			if (send_speed) {
				sprintf(response, "<s:%d>\n", speed);
     c70:	0f 2e       	mov	r0, r31
     c72:	f8 e4       	ldi	r31, 0x48	; 72
     c74:	cf 2e       	mov	r12, r31
     c76:	f1 e0       	ldi	r31, 0x01	; 1
     c78:	df 2e       	mov	r13, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	00 e7       	ldi	r16, 0x70	; 112
     c7e:	11 e0       	ldi	r17, 0x01	; 1
			sp_pid = 0;
			reset_pid();
			forward(0);
		}
		if (stallChanged) {
			sprintf(response, "<stall:%d>\n", stallLevel);
     c80:	0f 2e       	mov	r0, r31
     c82:	f0 e5       	ldi	r31, 0x50	; 80
     c84:	ef 2e       	mov	r14, r31
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
	
	uint8_t n;
	char buf[16];
	
	while (1) {
		if (update_pid) {
     c8c:	80 91 84 01 	lds	r24, 0x0184
     c90:	88 23       	and	r24, r24
     c92:	09 f4       	brne	.+2      	; 0xc96 <main+0x182>
     c94:	41 c0       	rjmp	.+130    	; 0xd18 <main+0x204>
			if (pid_on) {
     c96:	80 91 07 01 	lds	r24, 0x0107
     c9a:	88 23       	and	r24, r24
     c9c:	21 f0       	breq	.+8      	; 0xca6 <main+0x192>
				pid();
     c9e:	0e 94 26 01 	call	0x24c	; 0x24c <pid>
				update_pid = 0;
     ca2:	10 92 84 01 	sts	0x0184, r1
			}
			if (send_speed) {
     ca6:	80 91 69 01 	lds	r24, 0x0169
     caa:	88 23       	and	r24, r24
     cac:	a9 f0       	breq	.+42     	; 0xcd8 <main+0x1c4>
				sprintf(response, "<s:%d>\n", speed);
     cae:	80 91 b0 01 	lds	r24, 0x01B0
     cb2:	8f 93       	push	r24
     cb4:	80 91 af 01 	lds	r24, 0x01AF
     cb8:	8f 93       	push	r24
     cba:	df 92       	push	r13
     cbc:	cf 92       	push	r12
     cbe:	1f 93       	push	r17
     cc0:	0f 93       	push	r16
     cc2:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
				usb_write(response);
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
			}
			if ((speed < 10) && (pwm > 250)) {
     cd8:	80 91 af 01 	lds	r24, 0x01AF
     cdc:	90 91 b0 01 	lds	r25, 0x01B0
     ce0:	0a 97       	sbiw	r24, 0x0a	; 10
     ce2:	8c f4       	brge	.+34     	; 0xd06 <main+0x1f2>
     ce4:	80 91 b1 01 	lds	r24, 0x01B1
     ce8:	90 91 b2 01 	lds	r25, 0x01B2
     cec:	8b 3f       	cpi	r24, 0xFB	; 251
     cee:	91 05       	cpc	r25, r1
     cf0:	54 f0       	brlt	.+20     	; 0xd06 <main+0x1f2>
				stall_counter++;
     cf2:	80 91 66 01 	lds	r24, 0x0166
     cf6:	90 91 67 01 	lds	r25, 0x0167
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	90 93 67 01 	sts	0x0167, r25
     d00:	80 93 66 01 	sts	0x0166, r24
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <main+0x1fa>
			} else {
				stall_counter = 0;
     d06:	10 92 67 01 	sts	0x0167, r1
     d0a:	10 92 66 01 	sts	0x0166, r1
			}
			fail_counter++;
     d0e:	90 91 6a 01 	lds	r25, 0x016A
     d12:	9f 5f       	subi	r25, 0xFF	; 255
     d14:	90 93 6a 01 	sts	0x016A, r25
		}
		
		if ((fail_counter == 100) && failsafe) {
     d18:	90 91 6a 01 	lds	r25, 0x016A
     d1c:	94 36       	cpi	r25, 0x64	; 100
     d1e:	69 f4       	brne	.+26     	; 0xd3a <main+0x226>
     d20:	80 91 05 01 	lds	r24, 0x0105
     d24:	88 23       	and	r24, r24
     d26:	49 f0       	breq	.+18     	; 0xd3a <main+0x226>
			sp_pid = 0;
     d28:	10 92 8f 01 	sts	0x018F, r1
     d2c:	10 92 8e 01 	sts	0x018E, r1
			reset_pid();
     d30:	0e 94 0a 01 	call	0x214	; 0x214 <reset_pid>
			forward(0);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 e5 00 	call	0x1ca	; 0x1ca <forward>
		}
		if (stallChanged) {
     d3a:	90 91 60 01 	lds	r25, 0x0160
     d3e:	99 23       	and	r25, r25
     d40:	a9 f0       	breq	.+42     	; 0xd6c <main+0x258>
			sprintf(response, "<stall:%d>\n", stallLevel);
     d42:	80 91 61 01 	lds	r24, 0x0161
     d46:	1f 92       	push	r1
     d48:	8f 93       	push	r24
     d4a:	ff 92       	push	r15
     d4c:	ef 92       	push	r14
     d4e:	1f 93       	push	r17
     d50:	0f 93       	push	r16
     d52:	0e 94 af 09 	call	0x135e	; 0x135e <sprintf>
			usb_write(response);
     d56:	c8 01       	movw	r24, r16
     d58:	0e 94 53 02 	call	0x4a6	; 0x4a6 <usb_write>
			stallChanged = 0;
     d5c:	10 92 60 01 	sts	0x0160, r1
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
		}	
	    //TODO implement UART read
		if (usb_serial_available()) {
     d6c:	0e 94 18 07 	call	0xe30	; 0xe30 <usb_serial_available>
     d70:	88 23       	and	r24, r24
     d72:	69 f0       	breq	.+26     	; 0xd8e <main+0x27a>
			n = recv_str(buf, sizeof(buf));
     d74:	60 e1       	ldi	r22, 0x10	; 16
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <recv_str>
			if (n == sizeof(buf)) {
     d7e:	80 31       	cpi	r24, 0x10	; 16
     d80:	09 f0       	breq	.+2      	; 0xd84 <main+0x270>
     d82:	84 cf       	rjmp	.-248    	; 0xc8c <main+0x178>
				parse_and_execute_command(buf);
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 dd 03 	call	0x7ba	; 0x7ba <parse_and_execute_command>
     d8c:	7f cf       	rjmp	.-258    	; 0xc8c <main+0x178>
			}
		}else if (newData == 1){
     d8e:	80 91 5c 01 	lds	r24, 0x015C
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <main+0x284>
     d96:	7a cf       	rjmp	.-268    	; 0xc8c <main+0x178>
			parse_and_execute_command(input_buf);
     d98:	80 e9       	ldi	r24, 0x90	; 144
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <parse_and_execute_command>
			newData = 0;
     da0:	10 92 5c 01 	sts	0x015C, r1
     da4:	73 cf       	rjmp	.-282    	; 0xc8c <main+0x178>

00000da6 <usb_init>:

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
        USB_FREEZE();				// enable USB
     da6:	80 ea       	ldi	r24, 0xA0	; 160
     da8:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     db0:	09 b4       	in	r0, 0x29	; 41
     db2:	00 fe       	sbrs	r0, 0
     db4:	fd cf       	rjmp	.-6      	; 0xdb0 <usb_init+0xa>
        USB_CONFIG();				// start USB clock
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     dbc:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     dc0:	10 92 6f 01 	sts	0x016F, r1
	cdc_line_rtsdtr = 0;
     dc4:	10 92 6c 01 	sts	0x016C, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     dc8:	8c e0       	ldi	r24, 0x0C	; 12
     dca:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     dce:	78 94       	sei
     dd0:	08 95       	ret

00000dd2 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     dd2:	2f b7       	in	r18, 0x3f	; 63
	cli();
     dd4:	f8 94       	cli
	if (!usb_configuration) {
     dd6:	80 91 6f 01 	lds	r24, 0x016F
     dda:	81 11       	cpse	r24, r1
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <usb_serial_getchar+0x14>
		SREG = intr_state;
     dde:	2f bf       	out	0x3f, r18	; 63
		return -1;
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	9f ef       	ldi	r25, 0xFF	; 255
     de4:	08 95       	ret
	}
	UENUM = CDC_RX_ENDPOINT;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	80 93 e9 00 	sts	0x00E9, r24
	retry:
	c = UEINTX;
     dec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(c & (1<<RWAL))) {
     df0:	85 fd       	sbrc	r24, 5
     df2:	12 c0       	rjmp	.+36     	; 0xe18 <usb_serial_getchar+0x46>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
     df4:	82 fd       	sbrc	r24, 2
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <usb_serial_getchar+0x2e>
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <usb_serial_getchar+0x3e>
     dfa:	82 fd       	sbrc	r24, 2
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <usb_serial_getchar+0x34>
     dfe:	08 c0       	rjmp	.+16     	; 0xe10 <usb_serial_getchar+0x3e>
			UEINTX = 0x6B;
     e00:	e8 ee       	ldi	r30, 0xE8	; 232
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	9b e6       	ldi	r25, 0x6B	; 107
     e06:	90 83       	st	Z, r25
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
	retry:
	c = UEINTX;
     e08:	80 81       	ld	r24, Z
	if (!(c & (1<<RWAL))) {
     e0a:	85 ff       	sbrs	r24, 5
     e0c:	f6 cf       	rjmp	.-20     	; 0xdfa <usb_serial_getchar+0x28>
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <usb_serial_getchar+0x46>
		// no data in buffer
		if (c & (1<<RXOUTI)) {
			UEINTX = 0x6B;
			goto retry;
		}	
		SREG = intr_state;
     e10:	2f bf       	out	0x3f, r18	; 63
		return -1;
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	08 95       	ret
	}
	// take one byte out of the buffer
	c = UEDATX;
     e18:	80 91 f1 00 	lds	r24, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     e1c:	90 91 e8 00 	lds	r25, 0x00E8
     e20:	95 fd       	sbrc	r25, 5
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <usb_serial_getchar+0x58>
     e24:	9b e6       	ldi	r25, 0x6B	; 107
     e26:	90 93 e8 00 	sts	0x00E8, r25
	SREG = intr_state;
     e2a:	2f bf       	out	0x3f, r18	; 63
	return c;
     e2c:	90 e0       	ldi	r25, 0x00	; 0
}
     e2e:	08 95       	ret

00000e30 <usb_serial_available>:
// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;

	intr_state = SREG;
     e30:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e32:	f8 94       	cli
	if (usb_configuration) {
     e34:	80 91 6f 01 	lds	r24, 0x016F
     e38:	88 23       	and	r24, r24
     e3a:	89 f0       	breq	.+34     	; 0xe5e <usb_serial_available+0x2e>
		UENUM = CDC_RX_ENDPOINT;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     e42:	80 91 f2 00 	lds	r24, 0x00F2
		if (!n) {
     e46:	81 11       	cpse	r24, r1
     e48:	0b c0       	rjmp	.+22     	; 0xe60 <usb_serial_available+0x30>
			i = UEINTX;
     e4a:	20 91 e8 00 	lds	r18, 0x00E8
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
     e4e:	22 ff       	sbrs	r18, 2
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <usb_serial_available+0x30>
     e52:	25 fd       	sbrc	r18, 5
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <usb_serial_available+0x30>
     e56:	2b e6       	ldi	r18, 0x6B	; 107
     e58:	20 93 e8 00 	sts	0x00E8, r18
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <usb_serial_available+0x30>
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
	uint8_t n=0, i, intr_state;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
		if (!n) {
			i = UEINTX;
			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
		}
	}
	SREG = intr_state;
     e60:	9f bf       	out	0x3f, r25	; 63
	return n;
}
     e62:	08 95       	ret

00000e64 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     e68:	90 91 6f 01 	lds	r25, 0x016F
     e6c:	99 23       	and	r25, r25
     e6e:	09 f4       	brne	.+2      	; 0xe72 <usb_serial_putchar+0xe>
     e70:	4c c0       	rjmp	.+152    	; 0xf0a <usb_serial_putchar+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     e72:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e74:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     e76:	24 e0       	ldi	r18, 0x04	; 4
     e78:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     e7c:	20 91 6d 01 	lds	r18, 0x016D
     e80:	22 23       	and	r18, r18
     e82:	49 f0       	breq	.+18     	; 0xe96 <usb_serial_putchar+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     e84:	20 91 e8 00 	lds	r18, 0x00E8
     e88:	25 fd       	sbrc	r18, 5
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <usb_serial_putchar+0x2e>
			SREG = intr_state;
     e8c:	9f bf       	out	0x3f, r25	; 63
			
			return -1;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	41 c0       	rjmp	.+130    	; 0xf14 <usb_serial_putchar+0xb0>
		}
		transmit_previous_timeout = 0;
     e92:	10 92 6d 01 	sts	0x016D, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     e96:	30 91 e4 00 	lds	r19, 0x00E4
     e9a:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     e9c:	20 91 e8 00 	lds	r18, 0x00E8
     ea0:	25 fd       	sbrc	r18, 5
     ea2:	24 c0       	rjmp	.+72     	; 0xeec <usb_serial_putchar+0x88>
		SREG = intr_state;
     ea4:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     ea6:	90 91 e4 00 	lds	r25, 0x00E4
     eaa:	93 17       	cp	r25, r19
     eac:	81 f0       	breq	.+32     	; 0xece <usb_serial_putchar+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     eae:	90 91 6f 01 	lds	r25, 0x016F
     eb2:	99 23       	and	r25, r25
     eb4:	61 f1       	breq	.+88     	; 0xf0e <usb_serial_putchar+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     eb6:	a9 ee       	ldi	r26, 0xE9	; 233
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     ebc:	e8 ee       	ldi	r30, 0xE8	; 232
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     ec0:	c4 ee       	ldi	r28, 0xE4	; 228
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <usb_serial_putchar+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
     ec6:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     ec8:	98 81       	ld	r25, Y
     eca:	93 13       	cpse	r25, r19
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <usb_serial_putchar+0x74>
			transmit_previous_timeout = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 6d 01 	sts	0x016D, r24
			return -1;
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	1e c0       	rjmp	.+60     	; 0xf14 <usb_serial_putchar+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     ed8:	90 91 6f 01 	lds	r25, 0x016F
     edc:	99 23       	and	r25, r25
     ede:	c9 f0       	breq	.+50     	; 0xf12 <usb_serial_putchar+0xae>
		// get ready to try checking again
		intr_state = SREG;
     ee0:	9f b7       	in	r25, 0x3f	; 63
		cli();
     ee2:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     ee4:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     ee6:	20 81       	ld	r18, Z
     ee8:	25 ff       	sbrs	r18, 5
     eea:	ed cf       	rjmp	.-38     	; 0xec6 <usb_serial_putchar+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     eec:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
     ef4:	85 fd       	sbrc	r24, 5
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <usb_serial_putchar+0x9a>
     ef8:	8a e3       	ldi	r24, 0x3A	; 58
     efa:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	80 93 6e 01 	sts	0x016E, r24
	SREG = intr_state;
     f04:	9f bf       	out	0x3f, r25	; 63
	return 0;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <usb_serial_putchar+0xb0>
int8_t usb_serial_putchar(uint8_t c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <usb_serial_putchar+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <usb_serial_putchar+0xb0>
     f12:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <__vector_11>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
     f2c:	e1 ee       	ldi	r30, 0xE1	; 225
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
        UDINT = 0;
     f32:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
     f34:	83 ff       	sbrs	r24, 3
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <__vector_11+0x40>
		UENUM = 0;
     f38:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
     f42:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     f46:	92 e1       	ldi	r25, 0x12	; 18
     f48:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
     f4c:	98 e0       	ldi	r25, 0x08	; 8
     f4e:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
     f52:	10 92 6f 01 	sts	0x016F, r1
		cdc_line_rtsdtr = 0;
     f56:	10 92 6c 01 	sts	0x016C, r1
        }
	if (intbits & (1<<SOFI)) {
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <__vector_11+0x6a>
		if (usb_configuration) {
     f5e:	80 91 6f 01 	lds	r24, 0x016F
     f62:	88 23       	and	r24, r24
     f64:	79 f0       	breq	.+30     	; 0xf84 <__vector_11+0x6a>
			t = transmit_flush_timer;
     f66:	80 91 6e 01 	lds	r24, 0x016E
			if (t) {
     f6a:	88 23       	and	r24, r24
     f6c:	59 f0       	breq	.+22     	; 0xf84 <__vector_11+0x6a>
				transmit_flush_timer = --t;
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 93 6e 01 	sts	0x016E, r24
				if (!t) {
     f74:	81 11       	cpse	r24, r1
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <__vector_11+0x6a>
					UENUM = CDC_TX_ENDPOINT;
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     f7e:	8a e3       	ldi	r24, 0x3A	; 58
     f80:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_12>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     fc0:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     fc4:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     fc8:	83 ff       	sbrs	r24, 3
     fca:	4c c1       	rjmp	.+664    	; 0x1264 <__vector_12+0x2ce>
                bmRequestType = UEDATX;
     fcc:	e1 ef       	ldi	r30, 0xF1	; 241
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	60 81       	ld	r22, Z
                bRequest = UEDATX;
     fd2:	80 81       	ld	r24, Z
                wValue = UEDATX;
     fd4:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
     fd6:	90 81       	ld	r25, Z
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	39 2b       	or	r19, r25
                wIndex = UEDATX;
     fdc:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
     fde:	90 81       	ld	r25, Z
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	59 2b       	or	r21, r25
                wLength = UEDATX;
     fe4:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
     fe6:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     fe8:	92 ef       	ldi	r25, 0xF2	; 242
     fea:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
     fee:	86 30       	cpi	r24, 0x06	; 6
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__vector_12+0x5e>
     ff2:	58 c0       	rjmp	.+176    	; 0x10a4 <__vector_12+0x10e>
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <__vector_12+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
     ff6:	81 e2       	ldi	r24, 0x21	; 33
     ff8:	80 93 eb 00 	sts	0x00EB, r24
					return;
     ffc:	3a c1       	rjmp	.+628    	; 0x1272 <__vector_12+0x2dc>
     ffe:	66 e0       	ldi	r22, 0x06	; 6
    1000:	84 e7       	ldi	r24, 0x74	; 116
    1002:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
    1004:	fc 01       	movw	r30, r24
    1006:	a5 91       	lpm	r26, Z+
    1008:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    100a:	2a 17       	cp	r18, r26
    100c:	3b 07       	cpc	r19, r27
    100e:	11 f0       	breq	.+4      	; 0x1014 <__vector_12+0x7e>
					list += sizeof(struct descriptor_list_struct);
    1010:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1012:	23 c0       	rjmp	.+70     	; 0x105a <__vector_12+0xc4>
				}
				list += 2;
    1014:	fc 01       	movw	r30, r24
    1016:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1018:	a5 91       	lpm	r26, Z+
    101a:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    101c:	4a 17       	cp	r20, r26
    101e:	5b 07       	cpc	r21, r27
    1020:	11 f0       	breq	.+4      	; 0x1026 <__vector_12+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
    1022:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1024:	1a c0       	rjmp	.+52     	; 0x105a <__vector_12+0xc4>
				}
				list += 2;
    1026:	fc 01       	movw	r30, r24
    1028:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    102a:	45 91       	lpm	r20, Z+
    102c:	54 91       	lpm	r21, Z
				list += 2;
    102e:	fc 01       	movw	r30, r24
    1030:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1032:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1034:	87 2f       	mov	r24, r23
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    103a:	8f 3f       	cpi	r24, 0xFF	; 255
    103c:	91 05       	cpc	r25, r1
    103e:	19 f0       	breq	.+6      	; 0x1046 <__vector_12+0xb0>
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__vector_12+0xb0>
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	82 17       	cp	r24, r18
    1048:	08 f4       	brcc	.+2      	; 0x104c <__vector_12+0xb6>
    104a:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    104c:	a8 ee       	ldi	r26, 0xE8	; 232
    104e:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1050:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1052:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1054:	c1 ef       	ldi	r28, 0xF1	; 241
    1056:	d0 e0       	ldi	r29, 0x00	; 0
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <__vector_12+0xca>
    105a:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    105c:	99 f6       	brne	.-90     	; 0x1004 <__vector_12+0x6e>
    105e:	cb cf       	rjmp	.-106    	; 0xff6 <__vector_12+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1060:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1062:	98 2f       	mov	r25, r24
    1064:	95 70       	andi	r25, 0x05	; 5
    1066:	e1 f3       	breq	.-8      	; 0x1060 <__vector_12+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
    1068:	82 fd       	sbrc	r24, 2
    106a:	03 c1       	rjmp	.+518    	; 0x1272 <__vector_12+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    106c:	32 2f       	mov	r19, r18
    106e:	21 31       	cpi	r18, 0x11	; 17
    1070:	08 f0       	brcs	.+2      	; 0x1074 <__vector_12+0xde>
    1072:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
    1074:	33 23       	and	r19, r19
    1076:	09 f4       	brne	.+2      	; 0x107a <__vector_12+0xe4>
    1078:	f9 c0       	rjmp	.+498    	; 0x126c <__vector_12+0x2d6>
    107a:	fa 01       	movw	r30, r20
    107c:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    107e:	94 91       	lpm	r25, Z
    1080:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	31 96       	adiw	r30, 0x01	; 1
    1086:	81 11       	cpse	r24, r1
    1088:	fa cf       	rjmp	.-12     	; 0x107e <__vector_12+0xe8>
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	83 0f       	add	r24, r19
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	48 0f       	add	r20, r24
    1094:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1096:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1098:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    109a:	21 11       	cpse	r18, r1
    109c:	e1 cf       	rjmp	.-62     	; 0x1060 <__vector_12+0xca>
    109e:	30 31       	cpi	r19, 0x10	; 16
    10a0:	f9 f2       	breq	.-66     	; 0x1060 <__vector_12+0xca>
    10a2:	e7 c0       	rjmp	.+462    	; 0x1272 <__vector_12+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    10a4:	85 30       	cpi	r24, 0x05	; 5
    10a6:	61 f4       	brne	.+24     	; 0x10c0 <__vector_12+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10a8:	8e ef       	ldi	r24, 0xFE	; 254
    10aa:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    10ae:	e8 ee       	ldi	r30, 0xE8	; 232
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	80 ff       	sbrs	r24, 0
    10b6:	fd cf       	rjmp	.-6      	; 0x10b2 <__vector_12+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    10b8:	20 68       	ori	r18, 0x80	; 128
    10ba:	20 93 e3 00 	sts	0x00E3, r18
			return;
    10be:	d9 c0       	rjmp	.+434    	; 0x1272 <__vector_12+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    10c0:	89 30       	cpi	r24, 0x09	; 9
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <__vector_12+0x130>
    10c4:	35 c0       	rjmp	.+106    	; 0x1130 <__vector_12+0x19a>
    10c6:	61 11       	cpse	r22, r1
    10c8:	cd c0       	rjmp	.+410    	; 0x1264 <__vector_12+0x2ce>
			usb_configuration = wValue;
    10ca:	20 93 6f 01 	sts	0x016F, r18
			cdc_line_rtsdtr = 0;
    10ce:	10 92 6c 01 	sts	0x016C, r1
			transmit_flush_timer = 0;
    10d2:	10 92 6e 01 	sts	0x016E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10d6:	8e ef       	ldi	r24, 0xFE	; 254
    10d8:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    10dc:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    10de:	29 e3       	ldi	r18, 0x39	; 57
    10e0:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    10e2:	c9 ee       	ldi	r28, 0xE9	; 233
    10e4:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    10e6:	ab ee       	ldi	r26, 0xEB	; 235
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    10ea:	0c ee       	ldi	r16, 0xEC	; 236
    10ec:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    10ee:	6d ee       	ldi	r22, 0xED	; 237
    10f0:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    10f2:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
    10f4:	a9 01       	movw	r20, r18
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	f9 01       	movw	r30, r18
    10fc:	94 91       	lpm	r25, Z
				UECONX = en;
    10fe:	9c 93       	st	X, r25
				if (en) {
    1100:	99 23       	and	r25, r25
    1102:	61 f0       	breq	.+24     	; 0x111c <__vector_12+0x186>
					UECFG0X = pgm_read_byte(cfg++);
    1104:	fa 01       	movw	r30, r20
    1106:	44 91       	lpm	r20, Z
    1108:	f8 01       	movw	r30, r16
    110a:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
    110c:	f9 01       	movw	r30, r18
    110e:	32 96       	adiw	r30, 0x02	; 2
    1110:	94 91       	lpm	r25, Z
    1112:	2d 5f       	subi	r18, 0xFD	; 253
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	fb 01       	movw	r30, r22
    1118:	90 83       	st	Z, r25
    111a:	01 c0       	rjmp	.+2      	; 0x111e <__vector_12+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    111c:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	85 30       	cpi	r24, 0x05	; 5
    1122:	39 f7       	brne	.-50     	; 0x10f2 <__vector_12+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1124:	ea ee       	ldi	r30, 0xEA	; 234
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8e e1       	ldi	r24, 0x1E	; 30
    112a:	80 83       	st	Z, r24
        		UERST = 0;
    112c:	10 82       	st	Z, r1
			return;
    112e:	a1 c0       	rjmp	.+322    	; 0x1272 <__vector_12+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1130:	88 30       	cpi	r24, 0x08	; 8
    1132:	81 f4       	brne	.+32     	; 0x1154 <__vector_12+0x1be>
    1134:	60 38       	cpi	r22, 0x80	; 128
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_12+0x1a4>
    1138:	95 c0       	rjmp	.+298    	; 0x1264 <__vector_12+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    113a:	e8 ee       	ldi	r30, 0xE8	; 232
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 ff       	sbrs	r24, 0
    1142:	fd cf       	rjmp	.-6      	; 0x113e <__vector_12+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1144:	80 91 6f 01 	lds	r24, 0x016F
    1148:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    114c:	8e ef       	ldi	r24, 0xFE	; 254
    114e:	80 93 e8 00 	sts	0x00E8, r24
    1152:	8f c0       	rjmp	.+286    	; 0x1272 <__vector_12+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1154:	81 32       	cpi	r24, 0x21	; 33
    1156:	b9 f4       	brne	.+46     	; 0x1186 <__vector_12+0x1f0>
    1158:	61 3a       	cpi	r22, 0xA1	; 161
    115a:	09 f0       	breq	.+2      	; 0x115e <__vector_12+0x1c8>
    115c:	83 c0       	rjmp	.+262    	; 0x1264 <__vector_12+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    115e:	e8 ee       	ldi	r30, 0xE8	; 232
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 ff       	sbrs	r24, 0
    1166:	fd cf       	rjmp	.-6      	; 0x1162 <__vector_12+0x1cc>
    1168:	e8 e0       	ldi	r30, 0x08	; 8
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	2f e0       	ldi	r18, 0x0F	; 15
    116e:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1170:	a1 ef       	ldi	r26, 0xF1	; 241
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	81 91       	ld	r24, Z+
    1176:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1178:	e2 17       	cp	r30, r18
    117a:	f3 07       	cpc	r31, r19
    117c:	d9 f7       	brne	.-10     	; 0x1174 <__vector_12+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    117e:	8e ef       	ldi	r24, 0xFE	; 254
    1180:	80 93 e8 00 	sts	0x00E8, r24
    1184:	76 c0       	rjmp	.+236    	; 0x1272 <__vector_12+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1186:	80 32       	cpi	r24, 0x20	; 32
    1188:	d1 f4       	brne	.+52     	; 0x11be <__vector_12+0x228>
    118a:	61 32       	cpi	r22, 0x21	; 33
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_12+0x1fa>
    118e:	6a c0       	rjmp	.+212    	; 0x1264 <__vector_12+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1190:	e8 ee       	ldi	r30, 0xE8	; 232
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	82 ff       	sbrs	r24, 2
    1198:	fd cf       	rjmp	.-6      	; 0x1194 <__vector_12+0x1fe>
    119a:	e8 e0       	ldi	r30, 0x08	; 8
    119c:	f1 e0       	ldi	r31, 0x01	; 1
    119e:	2f e0       	ldi	r18, 0x0F	; 15
    11a0:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    11a2:	a1 ef       	ldi	r26, 0xF1	; 241
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	8c 91       	ld	r24, X
    11a8:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    11aa:	e2 17       	cp	r30, r18
    11ac:	f3 07       	cpc	r31, r19
    11ae:	d9 f7       	brne	.-10     	; 0x11a6 <__vector_12+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    11b0:	e8 ee       	ldi	r30, 0xE8	; 232
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8b ef       	ldi	r24, 0xFB	; 251
    11b6:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11b8:	8e ef       	ldi	r24, 0xFE	; 254
    11ba:	80 83       	st	Z, r24
    11bc:	5a c0       	rjmp	.+180    	; 0x1272 <__vector_12+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    11be:	82 32       	cpi	r24, 0x22	; 34
    11c0:	71 f4       	brne	.+28     	; 0x11de <__vector_12+0x248>
    11c2:	61 32       	cpi	r22, 0x21	; 33
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__vector_12+0x232>
    11c6:	4e c0       	rjmp	.+156    	; 0x1264 <__vector_12+0x2ce>
			cdc_line_rtsdtr = wValue;
    11c8:	20 93 6c 01 	sts	0x016C, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    11cc:	e8 ee       	ldi	r30, 0xE8	; 232
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	80 ff       	sbrs	r24, 0
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <__vector_12+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11d6:	8e ef       	ldi	r24, 0xFE	; 254
    11d8:	80 93 e8 00 	sts	0x00E8, r24
    11dc:	4a c0       	rjmp	.+148    	; 0x1272 <__vector_12+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    11de:	81 11       	cpse	r24, r1
    11e0:	1a c0       	rjmp	.+52     	; 0x1216 <__vector_12+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    11e2:	e8 ee       	ldi	r30, 0xE8	; 232
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 ff       	sbrs	r24, 0
    11ea:	fd cf       	rjmp	.-6      	; 0x11e6 <__vector_12+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    11ec:	62 38       	cpi	r22, 0x82	; 130
    11ee:	51 f4       	brne	.+20     	; 0x1204 <__vector_12+0x26e>
				UENUM = wIndex;
    11f0:	e9 ee       	ldi	r30, 0xE9	; 233
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
    11f6:	80 91 eb 00 	lds	r24, 0x00EB
    11fa:	85 fb       	bst	r24, 5
    11fc:	88 27       	eor	r24, r24
    11fe:	80 f9       	bld	r24, 0
				UENUM = 0;
    1200:	10 82       	st	Z, r1
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <__vector_12+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1204:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1206:	e1 ef       	ldi	r30, 0xF1	; 241
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 83       	st	Z, r24
			UEDATX = 0;
    120c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    120e:	8e ef       	ldi	r24, 0xFE	; 254
    1210:	80 93 e8 00 	sts	0x00E8, r24
    1214:	2e c0       	rjmp	.+92     	; 0x1272 <__vector_12+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1216:	98 2f       	mov	r25, r24
    1218:	9d 7f       	andi	r25, 0xFD	; 253
    121a:	91 30       	cpi	r25, 0x01	; 1
    121c:	19 f5       	brne	.+70     	; 0x1264 <__vector_12+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
    121e:	62 30       	cpi	r22, 0x02	; 2
    1220:	09 f5       	brne	.+66     	; 0x1264 <__vector_12+0x2ce>
    1222:	23 2b       	or	r18, r19
    1224:	f9 f4       	brne	.+62     	; 0x1264 <__vector_12+0x2ce>
			i = wIndex & 0x7F;
    1226:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1228:	9f ef       	ldi	r25, 0xFF	; 255
    122a:	94 0f       	add	r25, r20
    122c:	94 30       	cpi	r25, 0x04	; 4
    122e:	d0 f4       	brcc	.+52     	; 0x1264 <__vector_12+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1230:	9e ef       	ldi	r25, 0xFE	; 254
    1232:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1236:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
    123a:	83 30       	cpi	r24, 0x03	; 3
    123c:	21 f4       	brne	.+8      	; 0x1246 <__vector_12+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    123e:	81 e2       	ldi	r24, 0x21	; 33
    1240:	80 93 eb 00 	sts	0x00EB, r24
    1244:	16 c0       	rjmp	.+44     	; 0x1272 <__vector_12+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1246:	89 e1       	ldi	r24, 0x19	; 25
    1248:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <__vector_12+0x2c0>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	4a 95       	dec	r20
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <__vector_12+0x2bc>
    125a:	ea ee       	ldi	r30, 0xEA	; 234
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 83       	st	Z, r24
					UERST = 0;
    1260:	10 82       	st	Z, r1
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <__vector_12+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1264:	81 e2       	ldi	r24, 0x21	; 33
    1266:	80 93 eb 00 	sts	0x00EB, r24
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <__vector_12+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    126c:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    126e:	21 11       	cpse	r18, r1
    1270:	f7 ce       	rjmp	.-530    	; 0x1060 <__vector_12+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	bf 91       	pop	r27
    127c:	af 91       	pop	r26
    127e:	9f 91       	pop	r25
    1280:	8f 91       	pop	r24
    1282:	7f 91       	pop	r23
    1284:	6f 91       	pop	r22
    1286:	5f 91       	pop	r21
    1288:	4f 91       	pop	r20
    128a:	3f 91       	pop	r19
    128c:	2f 91       	pop	r18
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__mulhi3>:
    129c:	00 24       	eor	r0, r0
    129e:	55 27       	eor	r21, r21
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <__mulhi3+0xe>
    12a2:	08 0e       	add	r0, r24
    12a4:	59 1f       	adc	r21, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <__mulhi3+0x1c>
    12ae:	76 95       	lsr	r23
    12b0:	67 95       	ror	r22
    12b2:	b8 f3       	brcs	.-18     	; 0x12a2 <__mulhi3+0x6>
    12b4:	71 05       	cpc	r23, r1
    12b6:	b9 f7       	brne	.-18     	; 0x12a6 <__mulhi3+0xa>
    12b8:	80 2d       	mov	r24, r0
    12ba:	95 2f       	mov	r25, r21
    12bc:	08 95       	ret

000012be <__divmodhi4>:
    12be:	97 fb       	bst	r25, 7
    12c0:	07 2e       	mov	r0, r23
    12c2:	16 f4       	brtc	.+4      	; 0x12c8 <__divmodhi4+0xa>
    12c4:	00 94       	com	r0
    12c6:	07 d0       	rcall	.+14     	; 0x12d6 <__divmodhi4_neg1>
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	09 d0       	rcall	.+18     	; 0x12de <__divmodhi4_neg2>
    12cc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__udivmodhi4>
    12d0:	07 fc       	sbrc	r0, 7
    12d2:	05 d0       	rcall	.+10     	; 0x12de <__divmodhi4_neg2>
    12d4:	3e f4       	brtc	.+14     	; 0x12e4 <__divmodhi4_exit>

000012d6 <__divmodhi4_neg1>:
    12d6:	90 95       	com	r25
    12d8:	81 95       	neg	r24
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	08 95       	ret

000012de <__divmodhi4_neg2>:
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255

000012e4 <__divmodhi4_exit>:
    12e4:	08 95       	ret

000012e6 <__udivmodhi4>:
    12e6:	aa 1b       	sub	r26, r26
    12e8:	bb 1b       	sub	r27, r27
    12ea:	51 e1       	ldi	r21, 0x11	; 17
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <__udivmodhi4_ep>

000012ee <__udivmodhi4_loop>:
    12ee:	aa 1f       	adc	r26, r26
    12f0:	bb 1f       	adc	r27, r27
    12f2:	a6 17       	cp	r26, r22
    12f4:	b7 07       	cpc	r27, r23
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <__udivmodhi4_ep>
    12f8:	a6 1b       	sub	r26, r22
    12fa:	b7 0b       	sbc	r27, r23

000012fc <__udivmodhi4_ep>:
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	5a 95       	dec	r21
    1302:	a9 f7       	brne	.-22     	; 0x12ee <__udivmodhi4_loop>
    1304:	80 95       	com	r24
    1306:	90 95       	com	r25
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	08 95       	ret

0000130e <atoi>:
    130e:	fc 01       	movw	r30, r24
    1310:	88 27       	eor	r24, r24
    1312:	99 27       	eor	r25, r25
    1314:	e8 94       	clt
    1316:	21 91       	ld	r18, Z+
    1318:	20 32       	cpi	r18, 0x20	; 32
    131a:	e9 f3       	breq	.-6      	; 0x1316 <atoi+0x8>
    131c:	29 30       	cpi	r18, 0x09	; 9
    131e:	10 f0       	brcs	.+4      	; 0x1324 <atoi+0x16>
    1320:	2e 30       	cpi	r18, 0x0E	; 14
    1322:	c8 f3       	brcs	.-14     	; 0x1316 <atoi+0x8>
    1324:	2b 32       	cpi	r18, 0x2B	; 43
    1326:	41 f0       	breq	.+16     	; 0x1338 <atoi+0x2a>
    1328:	2d 32       	cpi	r18, 0x2D	; 45
    132a:	39 f4       	brne	.+14     	; 0x133a <atoi+0x2c>
    132c:	68 94       	set
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <atoi+0x2a>
    1330:	0e 94 a5 09 	call	0x134a	; 0x134a <__mulhi_const_10>
    1334:	82 0f       	add	r24, r18
    1336:	91 1d       	adc	r25, r1
    1338:	21 91       	ld	r18, Z+
    133a:	20 53       	subi	r18, 0x30	; 48
    133c:	2a 30       	cpi	r18, 0x0A	; 10
    133e:	c0 f3       	brcs	.-16     	; 0x1330 <atoi+0x22>
    1340:	1e f4       	brtc	.+6      	; 0x1348 <atoi+0x3a>
    1342:	90 95       	com	r25
    1344:	81 95       	neg	r24
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	08 95       	ret

0000134a <__mulhi_const_10>:
    134a:	bc 01       	movw	r22, r24
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	86 0f       	add	r24, r22
    1356:	97 1f       	adc	r25, r23
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	08 95       	ret

0000135e <sprintf>:
    135e:	ae e0       	ldi	r26, 0x0E	; 14
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 eb       	ldi	r30, 0xB5	; 181
    1364:	f9 e0       	ldi	r31, 0x09	; 9
    1366:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__prologue_saves__+0x1c>
    136a:	0d 89       	ldd	r16, Y+21	; 0x15
    136c:	1e 89       	ldd	r17, Y+22	; 0x16
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	8c 83       	std	Y+4, r24	; 0x04
    1372:	1a 83       	std	Y+2, r17	; 0x02
    1374:	09 83       	std	Y+1, r16	; 0x01
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	9f e7       	ldi	r25, 0x7F	; 127
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	ae 01       	movw	r20, r28
    1380:	47 5e       	subi	r20, 0xE7	; 231
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	6f 89       	ldd	r22, Y+23	; 0x17
    1386:	78 8d       	ldd	r23, Y+24	; 0x18
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <vfprintf>
    1390:	2f 81       	ldd	r18, Y+7	; 0x07
    1392:	38 85       	ldd	r19, Y+8	; 0x08
    1394:	f8 01       	movw	r30, r16
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	10 82       	st	Z, r1
    139c:	2e 96       	adiw	r28, 0x0e	; 14
    139e:	e4 e0       	ldi	r30, 0x04	; 4
    13a0:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__epilogue_restores__+0x1c>

000013a4 <vfprintf>:
    13a4:	ac e0       	ldi	r26, 0x0C	; 12
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 ed       	ldi	r30, 0xD8	; 216
    13aa:	f9 e0       	ldi	r31, 0x09	; 9
    13ac:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__prologue_saves__>
    13b0:	7c 01       	movw	r14, r24
    13b2:	6b 01       	movw	r12, r22
    13b4:	8a 01       	movw	r16, r20
    13b6:	fc 01       	movw	r30, r24
    13b8:	17 82       	std	Z+7, r1	; 0x07
    13ba:	16 82       	std	Z+6, r1	; 0x06
    13bc:	83 81       	ldd	r24, Z+3	; 0x03
    13be:	81 ff       	sbrs	r24, 1
    13c0:	bf c1       	rjmp	.+894    	; 0x1740 <vfprintf+0x39c>
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	4c 01       	movw	r8, r24
    13c8:	f7 01       	movw	r30, r14
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	f6 01       	movw	r30, r12
    13ce:	93 fd       	sbrc	r25, 3
    13d0:	85 91       	lpm	r24, Z+
    13d2:	93 ff       	sbrs	r25, 3
    13d4:	81 91       	ld	r24, Z+
    13d6:	6f 01       	movw	r12, r30
    13d8:	88 23       	and	r24, r24
    13da:	09 f4       	brne	.+2      	; 0x13de <vfprintf+0x3a>
    13dc:	ad c1       	rjmp	.+858    	; 0x1738 <vfprintf+0x394>
    13de:	85 32       	cpi	r24, 0x25	; 37
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <vfprintf+0x4c>
    13e2:	93 fd       	sbrc	r25, 3
    13e4:	85 91       	lpm	r24, Z+
    13e6:	93 ff       	sbrs	r25, 3
    13e8:	81 91       	ld	r24, Z+
    13ea:	6f 01       	movw	r12, r30
    13ec:	85 32       	cpi	r24, 0x25	; 37
    13ee:	29 f4       	brne	.+10     	; 0x13fa <vfprintf+0x56>
    13f0:	b7 01       	movw	r22, r14
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    13f8:	e7 cf       	rjmp	.-50     	; 0x13c8 <vfprintf+0x24>
    13fa:	51 2c       	mov	r5, r1
    13fc:	31 2c       	mov	r3, r1
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	20 32       	cpi	r18, 0x20	; 32
    1402:	a0 f4       	brcc	.+40     	; 0x142c <vfprintf+0x88>
    1404:	8b 32       	cpi	r24, 0x2B	; 43
    1406:	69 f0       	breq	.+26     	; 0x1422 <vfprintf+0x7e>
    1408:	30 f4       	brcc	.+12     	; 0x1416 <vfprintf+0x72>
    140a:	80 32       	cpi	r24, 0x20	; 32
    140c:	59 f0       	breq	.+22     	; 0x1424 <vfprintf+0x80>
    140e:	83 32       	cpi	r24, 0x23	; 35
    1410:	69 f4       	brne	.+26     	; 0x142c <vfprintf+0x88>
    1412:	20 61       	ori	r18, 0x10	; 16
    1414:	2e c0       	rjmp	.+92     	; 0x1472 <vfprintf+0xce>
    1416:	8d 32       	cpi	r24, 0x2D	; 45
    1418:	39 f0       	breq	.+14     	; 0x1428 <vfprintf+0x84>
    141a:	80 33       	cpi	r24, 0x30	; 48
    141c:	39 f4       	brne	.+14     	; 0x142c <vfprintf+0x88>
    141e:	21 60       	ori	r18, 0x01	; 1
    1420:	28 c0       	rjmp	.+80     	; 0x1472 <vfprintf+0xce>
    1422:	22 60       	ori	r18, 0x02	; 2
    1424:	24 60       	ori	r18, 0x04	; 4
    1426:	25 c0       	rjmp	.+74     	; 0x1472 <vfprintf+0xce>
    1428:	28 60       	ori	r18, 0x08	; 8
    142a:	23 c0       	rjmp	.+70     	; 0x1472 <vfprintf+0xce>
    142c:	27 fd       	sbrc	r18, 7
    142e:	29 c0       	rjmp	.+82     	; 0x1482 <vfprintf+0xde>
    1430:	30 ed       	ldi	r19, 0xD0	; 208
    1432:	38 0f       	add	r19, r24
    1434:	3a 30       	cpi	r19, 0x0A	; 10
    1436:	88 f4       	brcc	.+34     	; 0x145a <vfprintf+0xb6>
    1438:	26 ff       	sbrs	r18, 6
    143a:	07 c0       	rjmp	.+14     	; 0x144a <vfprintf+0xa6>
    143c:	85 2d       	mov	r24, r5
    143e:	6a e0       	ldi	r22, 0x0A	; 10
    1440:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__mulqi3>
    1444:	58 2e       	mov	r5, r24
    1446:	53 0e       	add	r5, r19
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <vfprintf+0xce>
    144a:	83 2d       	mov	r24, r3
    144c:	6a e0       	ldi	r22, 0x0A	; 10
    144e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__mulqi3>
    1452:	38 2e       	mov	r3, r24
    1454:	33 0e       	add	r3, r19
    1456:	20 62       	ori	r18, 0x20	; 32
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <vfprintf+0xce>
    145a:	8e 32       	cpi	r24, 0x2E	; 46
    145c:	21 f4       	brne	.+8      	; 0x1466 <vfprintf+0xc2>
    145e:	26 fd       	sbrc	r18, 6
    1460:	6b c1       	rjmp	.+726    	; 0x1738 <vfprintf+0x394>
    1462:	20 64       	ori	r18, 0x40	; 64
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <vfprintf+0xce>
    1466:	8c 36       	cpi	r24, 0x6C	; 108
    1468:	11 f4       	brne	.+4      	; 0x146e <vfprintf+0xca>
    146a:	20 68       	ori	r18, 0x80	; 128
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <vfprintf+0xce>
    146e:	88 36       	cpi	r24, 0x68	; 104
    1470:	41 f4       	brne	.+16     	; 0x1482 <vfprintf+0xde>
    1472:	f6 01       	movw	r30, r12
    1474:	93 fd       	sbrc	r25, 3
    1476:	85 91       	lpm	r24, Z+
    1478:	93 ff       	sbrs	r25, 3
    147a:	81 91       	ld	r24, Z+
    147c:	6f 01       	movw	r12, r30
    147e:	81 11       	cpse	r24, r1
    1480:	bf cf       	rjmp	.-130    	; 0x1400 <vfprintf+0x5c>
    1482:	98 2f       	mov	r25, r24
    1484:	9f 7d       	andi	r25, 0xDF	; 223
    1486:	95 54       	subi	r25, 0x45	; 69
    1488:	93 30       	cpi	r25, 0x03	; 3
    148a:	28 f4       	brcc	.+10     	; 0x1496 <vfprintf+0xf2>
    148c:	0c 5f       	subi	r16, 0xFC	; 252
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
    1490:	ff e3       	ldi	r31, 0x3F	; 63
    1492:	f9 83       	std	Y+1, r31	; 0x01
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <vfprintf+0x10c>
    1496:	83 36       	cpi	r24, 0x63	; 99
    1498:	31 f0       	breq	.+12     	; 0x14a6 <vfprintf+0x102>
    149a:	83 37       	cpi	r24, 0x73	; 115
    149c:	71 f0       	breq	.+28     	; 0x14ba <vfprintf+0x116>
    149e:	83 35       	cpi	r24, 0x53	; 83
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <vfprintf+0x100>
    14a2:	5b c0       	rjmp	.+182    	; 0x155a <vfprintf+0x1b6>
    14a4:	22 c0       	rjmp	.+68     	; 0x14ea <vfprintf+0x146>
    14a6:	f8 01       	movw	r30, r16
    14a8:	80 81       	ld	r24, Z
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	0e 5f       	subi	r16, 0xFE	; 254
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	44 24       	eor	r4, r4
    14b2:	43 94       	inc	r4
    14b4:	51 2c       	mov	r5, r1
    14b6:	54 01       	movw	r10, r8
    14b8:	15 c0       	rjmp	.+42     	; 0x14e4 <vfprintf+0x140>
    14ba:	38 01       	movw	r6, r16
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	6f 0e       	add	r6, r31
    14c0:	71 1c       	adc	r7, r1
    14c2:	f8 01       	movw	r30, r16
    14c4:	a0 80       	ld	r10, Z
    14c6:	b1 80       	ldd	r11, Z+1	; 0x01
    14c8:	26 ff       	sbrs	r18, 6
    14ca:	03 c0       	rjmp	.+6      	; 0x14d2 <vfprintf+0x12e>
    14cc:	65 2d       	mov	r22, r5
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <vfprintf+0x132>
    14d2:	6f ef       	ldi	r22, 0xFF	; 255
    14d4:	7f ef       	ldi	r23, 0xFF	; 255
    14d6:	c5 01       	movw	r24, r10
    14d8:	2c 87       	std	Y+12, r18	; 0x0c
    14da:	0e 94 b1 0b 	call	0x1762	; 0x1762 <strnlen>
    14de:	2c 01       	movw	r4, r24
    14e0:	83 01       	movw	r16, r6
    14e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e4:	2f 77       	andi	r18, 0x7F	; 127
    14e6:	22 2e       	mov	r2, r18
    14e8:	17 c0       	rjmp	.+46     	; 0x1518 <vfprintf+0x174>
    14ea:	38 01       	movw	r6, r16
    14ec:	f2 e0       	ldi	r31, 0x02	; 2
    14ee:	6f 0e       	add	r6, r31
    14f0:	71 1c       	adc	r7, r1
    14f2:	f8 01       	movw	r30, r16
    14f4:	a0 80       	ld	r10, Z
    14f6:	b1 80       	ldd	r11, Z+1	; 0x01
    14f8:	26 ff       	sbrs	r18, 6
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <vfprintf+0x15e>
    14fc:	65 2d       	mov	r22, r5
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vfprintf+0x162>
    1502:	6f ef       	ldi	r22, 0xFF	; 255
    1504:	7f ef       	ldi	r23, 0xFF	; 255
    1506:	c5 01       	movw	r24, r10
    1508:	2c 87       	std	Y+12, r18	; 0x0c
    150a:	0e 94 a6 0b 	call	0x174c	; 0x174c <strnlen_P>
    150e:	2c 01       	movw	r4, r24
    1510:	2c 85       	ldd	r18, Y+12	; 0x0c
    1512:	20 68       	ori	r18, 0x80	; 128
    1514:	22 2e       	mov	r2, r18
    1516:	83 01       	movw	r16, r6
    1518:	23 fc       	sbrc	r2, 3
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <vfprintf+0x1ae>
    151c:	83 2d       	mov	r24, r3
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	48 16       	cp	r4, r24
    1522:	59 06       	cpc	r5, r25
    1524:	b0 f4       	brcc	.+44     	; 0x1552 <vfprintf+0x1ae>
    1526:	b7 01       	movw	r22, r14
    1528:	80 e2       	ldi	r24, 0x20	; 32
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1530:	3a 94       	dec	r3
    1532:	f4 cf       	rjmp	.-24     	; 0x151c <vfprintf+0x178>
    1534:	f5 01       	movw	r30, r10
    1536:	27 fc       	sbrc	r2, 7
    1538:	85 91       	lpm	r24, Z+
    153a:	27 fe       	sbrs	r2, 7
    153c:	81 91       	ld	r24, Z+
    153e:	5f 01       	movw	r10, r30
    1540:	b7 01       	movw	r22, r14
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1548:	31 10       	cpse	r3, r1
    154a:	3a 94       	dec	r3
    154c:	f1 e0       	ldi	r31, 0x01	; 1
    154e:	4f 1a       	sub	r4, r31
    1550:	51 08       	sbc	r5, r1
    1552:	41 14       	cp	r4, r1
    1554:	51 04       	cpc	r5, r1
    1556:	71 f7       	brne	.-36     	; 0x1534 <vfprintf+0x190>
    1558:	e5 c0       	rjmp	.+458    	; 0x1724 <vfprintf+0x380>
    155a:	84 36       	cpi	r24, 0x64	; 100
    155c:	11 f0       	breq	.+4      	; 0x1562 <vfprintf+0x1be>
    155e:	89 36       	cpi	r24, 0x69	; 105
    1560:	39 f5       	brne	.+78     	; 0x15b0 <vfprintf+0x20c>
    1562:	f8 01       	movw	r30, r16
    1564:	27 ff       	sbrs	r18, 7
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <vfprintf+0x1d2>
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	0c 5f       	subi	r16, 0xFC	; 252
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <vfprintf+0x1e2>
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	07 2e       	mov	r0, r23
    157c:	00 0c       	add	r0, r0
    157e:	88 0b       	sbc	r24, r24
    1580:	99 0b       	sbc	r25, r25
    1582:	0e 5f       	subi	r16, 0xFE	; 254
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	2f 76       	andi	r18, 0x6F	; 111
    1588:	72 2e       	mov	r7, r18
    158a:	97 ff       	sbrs	r25, 7
    158c:	09 c0       	rjmp	.+18     	; 0x15a0 <vfprintf+0x1fc>
    158e:	90 95       	com	r25
    1590:	80 95       	com	r24
    1592:	70 95       	com	r23
    1594:	61 95       	neg	r22
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	20 68       	ori	r18, 0x80	; 128
    159e:	72 2e       	mov	r7, r18
    15a0:	2a e0       	ldi	r18, 0x0A	; 10
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	a4 01       	movw	r20, r8
    15a6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__ultoa_invert>
    15aa:	a8 2e       	mov	r10, r24
    15ac:	a8 18       	sub	r10, r8
    15ae:	44 c0       	rjmp	.+136    	; 0x1638 <vfprintf+0x294>
    15b0:	85 37       	cpi	r24, 0x75	; 117
    15b2:	29 f4       	brne	.+10     	; 0x15be <vfprintf+0x21a>
    15b4:	2f 7e       	andi	r18, 0xEF	; 239
    15b6:	b2 2e       	mov	r11, r18
    15b8:	2a e0       	ldi	r18, 0x0A	; 10
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	25 c0       	rjmp	.+74     	; 0x1608 <vfprintf+0x264>
    15be:	f2 2f       	mov	r31, r18
    15c0:	f9 7f       	andi	r31, 0xF9	; 249
    15c2:	bf 2e       	mov	r11, r31
    15c4:	8f 36       	cpi	r24, 0x6F	; 111
    15c6:	c1 f0       	breq	.+48     	; 0x15f8 <vfprintf+0x254>
    15c8:	18 f4       	brcc	.+6      	; 0x15d0 <vfprintf+0x22c>
    15ca:	88 35       	cpi	r24, 0x58	; 88
    15cc:	79 f0       	breq	.+30     	; 0x15ec <vfprintf+0x248>
    15ce:	b4 c0       	rjmp	.+360    	; 0x1738 <vfprintf+0x394>
    15d0:	80 37       	cpi	r24, 0x70	; 112
    15d2:	19 f0       	breq	.+6      	; 0x15da <vfprintf+0x236>
    15d4:	88 37       	cpi	r24, 0x78	; 120
    15d6:	21 f0       	breq	.+8      	; 0x15e0 <vfprintf+0x23c>
    15d8:	af c0       	rjmp	.+350    	; 0x1738 <vfprintf+0x394>
    15da:	2f 2f       	mov	r18, r31
    15dc:	20 61       	ori	r18, 0x10	; 16
    15de:	b2 2e       	mov	r11, r18
    15e0:	b4 fe       	sbrs	r11, 4
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <vfprintf+0x25a>
    15e4:	8b 2d       	mov	r24, r11
    15e6:	84 60       	ori	r24, 0x04	; 4
    15e8:	b8 2e       	mov	r11, r24
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <vfprintf+0x25a>
    15ec:	24 ff       	sbrs	r18, 4
    15ee:	0a c0       	rjmp	.+20     	; 0x1604 <vfprintf+0x260>
    15f0:	9f 2f       	mov	r25, r31
    15f2:	96 60       	ori	r25, 0x06	; 6
    15f4:	b9 2e       	mov	r11, r25
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x260>
    15f8:	28 e0       	ldi	r18, 0x08	; 8
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <vfprintf+0x264>
    15fe:	20 e1       	ldi	r18, 0x10	; 16
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0x264>
    1604:	20 e1       	ldi	r18, 0x10	; 16
    1606:	32 e0       	ldi	r19, 0x02	; 2
    1608:	f8 01       	movw	r30, r16
    160a:	b7 fe       	sbrs	r11, 7
    160c:	07 c0       	rjmp	.+14     	; 0x161c <vfprintf+0x278>
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	0c 5f       	subi	r16, 0xFC	; 252
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <vfprintf+0x284>
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 5f       	subi	r16, 0xFE	; 254
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	a4 01       	movw	r20, r8
    162a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__ultoa_invert>
    162e:	a8 2e       	mov	r10, r24
    1630:	a8 18       	sub	r10, r8
    1632:	fb 2d       	mov	r31, r11
    1634:	ff 77       	andi	r31, 0x7F	; 127
    1636:	7f 2e       	mov	r7, r31
    1638:	76 fe       	sbrs	r7, 6
    163a:	0b c0       	rjmp	.+22     	; 0x1652 <vfprintf+0x2ae>
    163c:	37 2d       	mov	r19, r7
    163e:	3e 7f       	andi	r19, 0xFE	; 254
    1640:	a5 14       	cp	r10, r5
    1642:	50 f4       	brcc	.+20     	; 0x1658 <vfprintf+0x2b4>
    1644:	74 fe       	sbrs	r7, 4
    1646:	0a c0       	rjmp	.+20     	; 0x165c <vfprintf+0x2b8>
    1648:	72 fc       	sbrc	r7, 2
    164a:	08 c0       	rjmp	.+16     	; 0x165c <vfprintf+0x2b8>
    164c:	37 2d       	mov	r19, r7
    164e:	3e 7e       	andi	r19, 0xEE	; 238
    1650:	05 c0       	rjmp	.+10     	; 0x165c <vfprintf+0x2b8>
    1652:	ba 2c       	mov	r11, r10
    1654:	37 2d       	mov	r19, r7
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x2ba>
    1658:	ba 2c       	mov	r11, r10
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x2ba>
    165c:	b5 2c       	mov	r11, r5
    165e:	34 ff       	sbrs	r19, 4
    1660:	0d c0       	rjmp	.+26     	; 0x167c <vfprintf+0x2d8>
    1662:	fe 01       	movw	r30, r28
    1664:	ea 0d       	add	r30, r10
    1666:	f1 1d       	adc	r31, r1
    1668:	80 81       	ld	r24, Z
    166a:	80 33       	cpi	r24, 0x30	; 48
    166c:	11 f4       	brne	.+4      	; 0x1672 <vfprintf+0x2ce>
    166e:	39 7e       	andi	r19, 0xE9	; 233
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <vfprintf+0x2e0>
    1672:	32 ff       	sbrs	r19, 2
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <vfprintf+0x2de>
    1676:	b3 94       	inc	r11
    1678:	b3 94       	inc	r11
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <vfprintf+0x2e0>
    167c:	83 2f       	mov	r24, r19
    167e:	86 78       	andi	r24, 0x86	; 134
    1680:	09 f0       	breq	.+2      	; 0x1684 <vfprintf+0x2e0>
    1682:	b3 94       	inc	r11
    1684:	33 fd       	sbrc	r19, 3
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <vfprintf+0x30a>
    1688:	30 ff       	sbrs	r19, 0
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <vfprintf+0x2f4>
    168c:	5a 2c       	mov	r5, r10
    168e:	b3 14       	cp	r11, r3
    1690:	18 f4       	brcc	.+6      	; 0x1698 <vfprintf+0x2f4>
    1692:	53 0c       	add	r5, r3
    1694:	5b 18       	sub	r5, r11
    1696:	b3 2c       	mov	r11, r3
    1698:	b3 14       	cp	r11, r3
    169a:	68 f4       	brcc	.+26     	; 0x16b6 <vfprintf+0x312>
    169c:	b7 01       	movw	r22, r14
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	3c 87       	std	Y+12, r19	; 0x0c
    16a4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    16a8:	b3 94       	inc	r11
    16aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    16ac:	f5 cf       	rjmp	.-22     	; 0x1698 <vfprintf+0x2f4>
    16ae:	b3 14       	cp	r11, r3
    16b0:	10 f4       	brcc	.+4      	; 0x16b6 <vfprintf+0x312>
    16b2:	3b 18       	sub	r3, r11
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <vfprintf+0x314>
    16b6:	31 2c       	mov	r3, r1
    16b8:	34 ff       	sbrs	r19, 4
    16ba:	12 c0       	rjmp	.+36     	; 0x16e0 <vfprintf+0x33c>
    16bc:	b7 01       	movw	r22, r14
    16be:	80 e3       	ldi	r24, 0x30	; 48
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	3c 87       	std	Y+12, r19	; 0x0c
    16c4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    16c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    16ca:	32 ff       	sbrs	r19, 2
    16cc:	17 c0       	rjmp	.+46     	; 0x16fc <vfprintf+0x358>
    16ce:	31 fd       	sbrc	r19, 1
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <vfprintf+0x334>
    16d2:	88 e7       	ldi	r24, 0x78	; 120
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <vfprintf+0x338>
    16d8:	88 e5       	ldi	r24, 0x58	; 88
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b7 01       	movw	r22, r14
    16de:	0c c0       	rjmp	.+24     	; 0x16f8 <vfprintf+0x354>
    16e0:	83 2f       	mov	r24, r19
    16e2:	86 78       	andi	r24, 0x86	; 134
    16e4:	59 f0       	breq	.+22     	; 0x16fc <vfprintf+0x358>
    16e6:	31 ff       	sbrs	r19, 1
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0x34a>
    16ea:	8b e2       	ldi	r24, 0x2B	; 43
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <vfprintf+0x34c>
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	37 fd       	sbrc	r19, 7
    16f2:	8d e2       	ldi	r24, 0x2D	; 45
    16f4:	b7 01       	movw	r22, r14
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    16fc:	a5 14       	cp	r10, r5
    16fe:	38 f4       	brcc	.+14     	; 0x170e <vfprintf+0x36a>
    1700:	b7 01       	movw	r22, r14
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    170a:	5a 94       	dec	r5
    170c:	f7 cf       	rjmp	.-18     	; 0x16fc <vfprintf+0x358>
    170e:	aa 94       	dec	r10
    1710:	f4 01       	movw	r30, r8
    1712:	ea 0d       	add	r30, r10
    1714:	f1 1d       	adc	r31, r1
    1716:	80 81       	ld	r24, Z
    1718:	b7 01       	movw	r22, r14
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1720:	a1 10       	cpse	r10, r1
    1722:	f5 cf       	rjmp	.-22     	; 0x170e <vfprintf+0x36a>
    1724:	33 20       	and	r3, r3
    1726:	09 f4       	brne	.+2      	; 0x172a <vfprintf+0x386>
    1728:	4f ce       	rjmp	.-866    	; 0x13c8 <vfprintf+0x24>
    172a:	b7 01       	movw	r22, r14
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 bc 0b 	call	0x1778	; 0x1778 <fputc>
    1734:	3a 94       	dec	r3
    1736:	f6 cf       	rjmp	.-20     	; 0x1724 <vfprintf+0x380>
    1738:	f7 01       	movw	r30, r14
    173a:	86 81       	ldd	r24, Z+6	; 0x06
    173c:	97 81       	ldd	r25, Z+7	; 0x07
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x3a0>
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	9f ef       	ldi	r25, 0xFF	; 255
    1744:	2c 96       	adiw	r28, 0x0c	; 12
    1746:	e2 e1       	ldi	r30, 0x12	; 18
    1748:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__epilogue_restores__>

0000174c <strnlen_P>:
    174c:	fc 01       	movw	r30, r24
    174e:	05 90       	lpm	r0, Z+
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	70 40       	sbci	r23, 0x00	; 0
    1754:	01 10       	cpse	r0, r1
    1756:	d8 f7       	brcc	.-10     	; 0x174e <strnlen_P+0x2>
    1758:	80 95       	com	r24
    175a:	90 95       	com	r25
    175c:	8e 0f       	add	r24, r30
    175e:	9f 1f       	adc	r25, r31
    1760:	08 95       	ret

00001762 <strnlen>:
    1762:	fc 01       	movw	r30, r24
    1764:	61 50       	subi	r22, 0x01	; 1
    1766:	70 40       	sbci	r23, 0x00	; 0
    1768:	01 90       	ld	r0, Z+
    176a:	01 10       	cpse	r0, r1
    176c:	d8 f7       	brcc	.-10     	; 0x1764 <strnlen+0x2>
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	8e 0f       	add	r24, r30
    1774:	9f 1f       	adc	r25, r31
    1776:	08 95       	ret

00001778 <fputc>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	fb 01       	movw	r30, r22
    1782:	23 81       	ldd	r18, Z+3	; 0x03
    1784:	21 fd       	sbrc	r18, 1
    1786:	03 c0       	rjmp	.+6      	; 0x178e <fputc+0x16>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f ef       	ldi	r25, 0xFF	; 255
    178c:	28 c0       	rjmp	.+80     	; 0x17de <fputc+0x66>
    178e:	22 ff       	sbrs	r18, 2
    1790:	16 c0       	rjmp	.+44     	; 0x17be <fputc+0x46>
    1792:	46 81       	ldd	r20, Z+6	; 0x06
    1794:	57 81       	ldd	r21, Z+7	; 0x07
    1796:	24 81       	ldd	r18, Z+4	; 0x04
    1798:	35 81       	ldd	r19, Z+5	; 0x05
    179a:	42 17       	cp	r20, r18
    179c:	53 07       	cpc	r21, r19
    179e:	44 f4       	brge	.+16     	; 0x17b0 <fputc+0x38>
    17a0:	a0 81       	ld	r26, Z
    17a2:	b1 81       	ldd	r27, Z+1	; 0x01
    17a4:	9d 01       	movw	r18, r26
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	8c 93       	st	X, r24
    17b0:	26 81       	ldd	r18, Z+6	; 0x06
    17b2:	37 81       	ldd	r19, Z+7	; 0x07
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
    17b8:	37 83       	std	Z+7, r19	; 0x07
    17ba:	26 83       	std	Z+6, r18	; 0x06
    17bc:	10 c0       	rjmp	.+32     	; 0x17de <fputc+0x66>
    17be:	eb 01       	movw	r28, r22
    17c0:	09 2f       	mov	r16, r25
    17c2:	18 2f       	mov	r17, r24
    17c4:	00 84       	ldd	r0, Z+8	; 0x08
    17c6:	f1 85       	ldd	r31, Z+9	; 0x09
    17c8:	e0 2d       	mov	r30, r0
    17ca:	09 95       	icall
    17cc:	89 2b       	or	r24, r25
    17ce:	e1 f6       	brne	.-72     	; 0x1788 <fputc+0x10>
    17d0:	8e 81       	ldd	r24, Y+6	; 0x06
    17d2:	9f 81       	ldd	r25, Y+7	; 0x07
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	9f 83       	std	Y+7, r25	; 0x07
    17d8:	8e 83       	std	Y+6, r24	; 0x06
    17da:	81 2f       	mov	r24, r17
    17dc:	90 2f       	mov	r25, r16
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <__ultoa_invert>:
    17e8:	fa 01       	movw	r30, r20
    17ea:	aa 27       	eor	r26, r26
    17ec:	28 30       	cpi	r18, 0x08	; 8
    17ee:	61 f1       	breq	.+88     	; 0x1848 <__ultoa_invert+0x60>
    17f0:	20 31       	cpi	r18, 0x10	; 16
    17f2:	91 f1       	breq	.+100    	; 0x1858 <__ultoa_invert+0x70>
    17f4:	e8 94       	clt
    17f6:	6f 93       	push	r22
    17f8:	6e 7f       	andi	r22, 0xFE	; 254
    17fa:	6e 5f       	subi	r22, 0xFE	; 254
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	af 4f       	sbci	r26, 0xFF	; 255
    1804:	b1 e0       	ldi	r27, 0x01	; 1
    1806:	40 d0       	rcall	.+128    	; 0x1888 <__ultoa_invert+0xa0>
    1808:	b4 e0       	ldi	r27, 0x04	; 4
    180a:	3e d0       	rcall	.+124    	; 0x1888 <__ultoa_invert+0xa0>
    180c:	67 0f       	add	r22, r23
    180e:	78 1f       	adc	r23, r24
    1810:	89 1f       	adc	r24, r25
    1812:	9a 1f       	adc	r25, r26
    1814:	a1 1d       	adc	r26, r1
    1816:	68 0f       	add	r22, r24
    1818:	79 1f       	adc	r23, r25
    181a:	8a 1f       	adc	r24, r26
    181c:	91 1d       	adc	r25, r1
    181e:	a1 1d       	adc	r26, r1
    1820:	6a 0f       	add	r22, r26
    1822:	71 1d       	adc	r23, r1
    1824:	81 1d       	adc	r24, r1
    1826:	91 1d       	adc	r25, r1
    1828:	a1 1d       	adc	r26, r1
    182a:	22 d0       	rcall	.+68     	; 0x1870 <__ultoa_invert+0x88>
    182c:	09 f4       	brne	.+2      	; 0x1830 <__ultoa_invert+0x48>
    182e:	68 94       	set
    1830:	3f 91       	pop	r19
    1832:	06 2e       	mov	r0, r22
    1834:	00 0c       	add	r0, r0
    1836:	30 19       	sub	r19, r0
    1838:	00 0c       	add	r0, r0
    183a:	00 0c       	add	r0, r0
    183c:	30 19       	sub	r19, r0
    183e:	30 5d       	subi	r19, 0xD0	; 208
    1840:	31 93       	st	Z+, r19
    1842:	ce f6       	brtc	.-78     	; 0x17f6 <__ultoa_invert+0xe>
    1844:	cf 01       	movw	r24, r30
    1846:	08 95       	ret
    1848:	46 2f       	mov	r20, r22
    184a:	47 70       	andi	r20, 0x07	; 7
    184c:	40 5d       	subi	r20, 0xD0	; 208
    184e:	41 93       	st	Z+, r20
    1850:	b3 e0       	ldi	r27, 0x03	; 3
    1852:	0f d0       	rcall	.+30     	; 0x1872 <__ultoa_invert+0x8a>
    1854:	c9 f7       	brne	.-14     	; 0x1848 <__ultoa_invert+0x60>
    1856:	f6 cf       	rjmp	.-20     	; 0x1844 <__ultoa_invert+0x5c>
    1858:	46 2f       	mov	r20, r22
    185a:	4f 70       	andi	r20, 0x0F	; 15
    185c:	40 5d       	subi	r20, 0xD0	; 208
    185e:	4a 33       	cpi	r20, 0x3A	; 58
    1860:	18 f0       	brcs	.+6      	; 0x1868 <__ultoa_invert+0x80>
    1862:	49 5d       	subi	r20, 0xD9	; 217
    1864:	31 fd       	sbrc	r19, 1
    1866:	40 52       	subi	r20, 0x20	; 32
    1868:	41 93       	st	Z+, r20
    186a:	02 d0       	rcall	.+4      	; 0x1870 <__ultoa_invert+0x88>
    186c:	a9 f7       	brne	.-22     	; 0x1858 <__ultoa_invert+0x70>
    186e:	ea cf       	rjmp	.-44     	; 0x1844 <__ultoa_invert+0x5c>
    1870:	b4 e0       	ldi	r27, 0x04	; 4
    1872:	a6 95       	lsr	r26
    1874:	97 95       	ror	r25
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	ba 95       	dec	r27
    187e:	c9 f7       	brne	.-14     	; 0x1872 <__ultoa_invert+0x8a>
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	61 05       	cpc	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	08 95       	ret
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	0a 2e       	mov	r0, r26
    188e:	06 94       	lsr	r0
    1890:	57 95       	ror	r21
    1892:	47 95       	ror	r20
    1894:	37 95       	ror	r19
    1896:	27 95       	ror	r18
    1898:	ba 95       	dec	r27
    189a:	c9 f7       	brne	.-14     	; 0x188e <__ultoa_invert+0xa6>
    189c:	62 0f       	add	r22, r18
    189e:	73 1f       	adc	r23, r19
    18a0:	84 1f       	adc	r24, r20
    18a2:	95 1f       	adc	r25, r21
    18a4:	a0 1d       	adc	r26, r0
    18a6:	08 95       	ret

000018a8 <eeprom_read_byte>:
    18a8:	f9 99       	sbic	0x1f, 1	; 31
    18aa:	fe cf       	rjmp	.-4      	; 0x18a8 <eeprom_read_byte>
    18ac:	92 bd       	out	0x22, r25	; 34
    18ae:	81 bd       	out	0x21, r24	; 33
    18b0:	f8 9a       	sbi	0x1f, 0	; 31
    18b2:	99 27       	eor	r25, r25
    18b4:	80 b5       	in	r24, 0x20	; 32
    18b6:	08 95       	ret

000018b8 <eeprom_update_byte>:
    18b8:	26 2f       	mov	r18, r22

000018ba <eeprom_update_r18>:
    18ba:	f9 99       	sbic	0x1f, 1	; 31
    18bc:	fe cf       	rjmp	.-4      	; 0x18ba <eeprom_update_r18>
    18be:	92 bd       	out	0x22, r25	; 34
    18c0:	81 bd       	out	0x21, r24	; 33
    18c2:	f8 9a       	sbi	0x1f, 0	; 31
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	00 b4       	in	r0, 0x20	; 32
    18c8:	02 16       	cp	r0, r18
    18ca:	39 f0       	breq	.+14     	; 0x18da <eeprom_update_r18+0x20>
    18cc:	1f ba       	out	0x1f, r1	; 31
    18ce:	20 bd       	out	0x20, r18	; 32
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	fa 9a       	sbi	0x1f, 2	; 31
    18d6:	f9 9a       	sbi	0x1f, 1	; 31
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	08 95       	ret

000018dc <__mulqi3>:
    18dc:	00 24       	eor	r0, r0

000018de <__mulqi3_loop>:
    18de:	80 fd       	sbrc	r24, 0
    18e0:	06 0e       	add	r0, r22
    18e2:	66 0f       	add	r22, r22
    18e4:	11 f0       	breq	.+4      	; 0x18ea <__mulqi3_exit>
    18e6:	86 95       	lsr	r24
    18e8:	d1 f7       	brne	.-12     	; 0x18de <__mulqi3_loop>

000018ea <__mulqi3_exit>:
    18ea:	80 2d       	mov	r24, r0
    18ec:	08 95       	ret

000018ee <__prologue_saves__>:
    18ee:	2f 92       	push	r2
    18f0:	3f 92       	push	r3
    18f2:	4f 92       	push	r4
    18f4:	5f 92       	push	r5
    18f6:	6f 92       	push	r6
    18f8:	7f 92       	push	r7
    18fa:	8f 92       	push	r8
    18fc:	9f 92       	push	r9
    18fe:	af 92       	push	r10
    1900:	bf 92       	push	r11
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	ca 1b       	sub	r28, r26
    1918:	db 0b       	sbc	r29, r27
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	09 94       	ijmp

00001926 <__epilogue_restores__>:
    1926:	2a 88       	ldd	r2, Y+18	; 0x12
    1928:	39 88       	ldd	r3, Y+17	; 0x11
    192a:	48 88       	ldd	r4, Y+16	; 0x10
    192c:	5f 84       	ldd	r5, Y+15	; 0x0f
    192e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1930:	7d 84       	ldd	r7, Y+13	; 0x0d
    1932:	8c 84       	ldd	r8, Y+12	; 0x0c
    1934:	9b 84       	ldd	r9, Y+11	; 0x0b
    1936:	aa 84       	ldd	r10, Y+10	; 0x0a
    1938:	b9 84       	ldd	r11, Y+9	; 0x09
    193a:	c8 84       	ldd	r12, Y+8	; 0x08
    193c:	df 80       	ldd	r13, Y+7	; 0x07
    193e:	ee 80       	ldd	r14, Y+6	; 0x06
    1940:	fd 80       	ldd	r15, Y+5	; 0x05
    1942:	0c 81       	ldd	r16, Y+4	; 0x04
    1944:	1b 81       	ldd	r17, Y+3	; 0x03
    1946:	aa 81       	ldd	r26, Y+2	; 0x02
    1948:	b9 81       	ldd	r27, Y+1	; 0x01
    194a:	ce 0f       	add	r28, r30
    194c:	d1 1d       	adc	r29, r1
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	ed 01       	movw	r28, r26
    195a:	08 95       	ret

0000195c <_exit>:
    195c:	f8 94       	cli

0000195e <__stop_program>:
    195e:	ff cf       	rjmp	.-2      	; 0x195e <__stop_program>
